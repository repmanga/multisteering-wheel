
multisteering-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003ae8  08003ae8  00004ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc8  08003bc8  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003bd0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000064  08003c34  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08003c34  0000530c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e90  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001981  00000000  00000000  0000df1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005eb  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764e  00000000  00000000  00010653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b1b  00000000  00000000  00027ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c99  00000000  00000000  000317bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  000b6498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b885c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ad0 	.word	0x08003ad0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003ad0 	.word	0x08003ad0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <nextion_send>:
#include "stm32f1xx_hal.h"
extern UART_HandleTypeDef huart1;

char ENDMSG[3] = {255, 255, 255};

void nextion_send(char* cmd){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	   HAL_UART_Transmit (&huart1, (uint8_t*) cmd, strlen (cmd), 50);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	2332      	movs	r3, #50	@ 0x32
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4806      	ldr	r0, [pc, #24]	@ (800018c <nextion_send+0x30>)
 8000174:	f002 fe28 	bl	8002dc8 <HAL_UART_Transmit>
	   HAL_UART_Transmit (&huart1, (uint8_t*) &ENDMSG, 3, 50);
 8000178:	2332      	movs	r3, #50	@ 0x32
 800017a:	2203      	movs	r2, #3
 800017c:	4904      	ldr	r1, [pc, #16]	@ (8000190 <nextion_send+0x34>)
 800017e:	4803      	ldr	r0, [pc, #12]	@ (800018c <nextion_send+0x30>)
 8000180:	f002 fe22 	bl	8002dc8 <HAL_UART_Transmit>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200000a8 	.word	0x200000a8
 8000190:	20000000 	.word	0x20000000

08000194 <HAL_CAN_RxFifo0MsgPendingCallback>:
void data_send_handler(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData.buff)
 800019c:	4b39      	ldr	r3, [pc, #228]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800019e:	4a3a      	ldr	r2, [pc, #232]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	6878      	ldr	r0, [r7, #4]
 80001a4:	f001 fb5b 	bl	800185e <HAL_CAN_GetRxMessage>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d166      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			== HAL_OK) {
		if (RxHeader.StdId == 0x600) {
 80001ae:	4b36      	ldr	r3, [pc, #216]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80001b6:	d110      	bne.n	80001da <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			for (uint8_t i = 0; i < 7; i++) {
 80001b8:	2300      	movs	r3, #0
 80001ba:	73fb      	strb	r3, [r7, #15]
 80001bc:	e00a      	b.n	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
				RxData.x600[i] = RxData.buff[i];
 80001be:	7bfa      	ldrb	r2, [r7, #15]
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	4930      	ldr	r1, [pc, #192]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001c4:	5c89      	ldrb	r1, [r1, r2]
 80001c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	721a      	strb	r2, [r3, #8]
			for (uint8_t i = 0; i < 7; i++) {
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3301      	adds	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	2b06      	cmp	r3, #6
 80001d8:	d9f1      	bls.n	80001be <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
			}
		}
		if (RxHeader.StdId == 0x601) {
 80001da:	4b2b      	ldr	r3, [pc, #172]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f240 6201 	movw	r2, #1537	@ 0x601
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d110      	bne.n	8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			for (uint8_t i = 0; i < 7; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	73bb      	strb	r3, [r7, #14]
 80001ea:	e00a      	b.n	8000202 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
				RxData.x601[i] = RxData.buff[i];
 80001ec:	7bba      	ldrb	r2, [r7, #14]
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	4924      	ldr	r1, [pc, #144]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001f2:	5c89      	ldrb	r1, [r1, r2]
 80001f4:	4a23      	ldr	r2, [pc, #140]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001f6:	4413      	add	r3, r2
 80001f8:	460a      	mov	r2, r1
 80001fa:	741a      	strb	r2, [r3, #16]
			for (uint8_t i = 0; i < 7; i++) {
 80001fc:	7bbb      	ldrb	r3, [r7, #14]
 80001fe:	3301      	adds	r3, #1
 8000200:	73bb      	strb	r3, [r7, #14]
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	2b06      	cmp	r3, #6
 8000206:	d9f1      	bls.n	80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
			}
		}
		if (RxHeader.StdId == 0x602) {
 8000208:	4b1f      	ldr	r3, [pc, #124]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f240 6202 	movw	r2, #1538	@ 0x602
 8000210:	4293      	cmp	r3, r2
 8000212:	d110      	bne.n	8000236 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			for (uint8_t i = 0; i < 7; i++) {
 8000214:	2300      	movs	r3, #0
 8000216:	737b      	strb	r3, [r7, #13]
 8000218:	e00a      	b.n	8000230 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
				RxData.x602[i] = RxData.buff[i];
 800021a:	7b7a      	ldrb	r2, [r7, #13]
 800021c:	7b7b      	ldrb	r3, [r7, #13]
 800021e:	4919      	ldr	r1, [pc, #100]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000220:	5c89      	ldrb	r1, [r1, r2]
 8000222:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	761a      	strb	r2, [r3, #24]
			for (uint8_t i = 0; i < 7; i++) {
 800022a:	7b7b      	ldrb	r3, [r7, #13]
 800022c:	3301      	adds	r3, #1
 800022e:	737b      	strb	r3, [r7, #13]
 8000230:	7b7b      	ldrb	r3, [r7, #13]
 8000232:	2b06      	cmp	r3, #6
 8000234:	d9f1      	bls.n	800021a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
			}
		}
		if (RxHeader.StdId == 0x604) {
 8000236:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f240 6204 	movw	r2, #1540	@ 0x604
 800023e:	4293      	cmp	r3, r2
 8000240:	d111      	bne.n	8000266 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			for (uint8_t i = 0; i < 7; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
 8000246:	e00b      	b.n	8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
				RxData.x604[i] = RxData.buff[i];
 8000248:	7b3a      	ldrb	r2, [r7, #12]
 800024a:	7b3b      	ldrb	r3, [r7, #12]
 800024c:	490d      	ldr	r1, [pc, #52]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800024e:	5c89      	ldrb	r1, [r1, r2]
 8000250:	4a0c      	ldr	r2, [pc, #48]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000252:	4413      	add	r3, r2
 8000254:	460a      	mov	r2, r1
 8000256:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < 7; i++) {
 800025a:	7b3b      	ldrb	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	733b      	strb	r3, [r7, #12]
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	2b06      	cmp	r3, #6
 8000264:	d9f0      	bls.n	8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			}
		}
#if DEBUG == 1
		if (RxHeader.StdId == 0x642) {
 8000266:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f240 6242 	movw	r2, #1602	@ 0x642
 800026e:	4293      	cmp	r3, r2
 8000270:	d104      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000278:	f002 f92d 	bl	80024d6 <HAL_GPIO_TogglePin>
		}
#endif
	}
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000134 	.word	0x20000134
 8000288:	20000108 	.word	0x20000108
 800028c:	40011000 	.word	0x40011000

08000290 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000298:	f000 fdac 	bl	8000df4 <Error_Handler>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002a8:	f000 ff48 	bl	800113c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ac:	f000 f810 	bl	80002d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002b0:	f000 f8d4 	bl	800045c <MX_GPIO_Init>
	MX_CAN_Init();
 80002b4:	f000 f852 	bl	800035c <MX_CAN_Init>
	MX_USART1_UART_Init();
 80002b8:	f000 f8a6 	bl	8000408 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	startup();
 80002bc:	f000 fd44 	bl	8000d48 <startup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		data_update_handler();
 80002c0:	f000 fc42 	bl	8000b48 <data_update_handler>
		data_send_handler();
 80002c4:	f000 fcca 	bl	8000c5c <data_send_handler>
		button_handler();
 80002c8:	f000 f964 	bl	8000594 <button_handler>
		data_update_handler();
 80002cc:	bf00      	nop
 80002ce:	e7f7      	b.n	80002c0 <main+0x1c>

080002d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 ff66 	bl	80031b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800030e:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000312:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f8f5 	bl	8002508 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
		Error_Handler();
 8000324:	f000 fd66 	bl	8000df4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000338:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fb62 	bl	8002a0c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
		Error_Handler();
 800034e:	f000 fd51 	bl	8000df4 <Error_Handler>
	}
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	@ 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	@ 0x28
 8000360:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000364:	4a27      	ldr	r2, [pc, #156]	@ (8000404 <MX_CAN_Init+0xa8>)
 8000366:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4; // TJA1050 (CHN version cannot perform at 1MBit, only at 500kBit)
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_CAN_Init+0xa4>)
 800036a:	2204      	movs	r2, #4
 800036c:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000374:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_CAN_Init+0xa4>)
 800037c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000380:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000382:	4b1f      	ldr	r3, [pc, #124]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000384:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000388:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800038a:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_CAN_Init+0xa4>)
 800038c:	2200      	movs	r2, #0
 800038e:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000392:	2200      	movs	r2, #0
 8000394:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000398:	2200      	movs	r2, #0
 800039a:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_CAN_Init+0xa4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80003ae:	4814      	ldr	r0, [pc, #80]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003b0:	f000 ff4a 	bl	8001248 <HAL_CAN_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_CAN_Init+0x62>
		Error_Handler();
 80003ba:	f000 fd1b 	bl	8000df4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80003de:	2301      	movs	r3, #1
 80003e0:	623b      	str	r3, [r7, #32]
	//sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80003e2:	463b      	mov	r3, r7
 80003e4:	4619      	mov	r1, r3
 80003e6:	4806      	ldr	r0, [pc, #24]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003e8:	f001 f829 	bl	800143e <HAL_CAN_ConfigFilter>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_CAN_Init+0x9a>
		Error_Handler();
 80003f2:	f000 fcff 	bl	8000df4 <Error_Handler>
	}
	/* USER CODE END CAN_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	@ 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000080 	.word	0x20000080
 8000404:	40006400 	.word	0x40006400

08000408 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	@ (8000458 <MX_USART1_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000418:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800043e:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000440:	f002 fc72 	bl	8002d28 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800044a:	f000 fcd3 	bl	8000df4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a8 	.word	0x200000a8
 8000458:	40013800 	.word	0x40013800

0800045c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a43      	ldr	r2, [pc, #268]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b41      	ldr	r3, [pc, #260]	@ (8000584 <MX_GPIO_Init+0x128>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b3e      	ldr	r3, [pc, #248]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a3d      	ldr	r2, [pc, #244]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b3b      	ldr	r3, [pc, #236]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a37      	ldr	r2, [pc, #220]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a31      	ldr	r2, [pc, #196]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d6:	482c      	ldr	r0, [pc, #176]	@ (8000588 <MX_GPIO_Init+0x12c>)
 80004d8:	f001 ffe5 	bl	80024a6 <HAL_GPIO_WritePin>
#if DEBUG == 1
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin,
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004e2:	482a      	ldr	r0, [pc, #168]	@ (800058c <MX_GPIO_Init+0x130>)
 80004e4:	f001 ffdf 	bl	80024a6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
#endif
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ee:	4828      	ldr	r0, [pc, #160]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004f0:	f001 ffd9 	bl	80024a6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_LED_Pin */
	GPIO_InitStruct.Pin = CAN_LED_Pin;
 80004f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	481e      	ldr	r0, [pc, #120]	@ (8000588 <MX_GPIO_Init+0x12c>)
 800050e:	f001 fe2f 	bl	8002170 <HAL_GPIO_Init>
#if DEBUG == 1
	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin;
 8000512:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <MX_GPIO_Init+0x130>)
 800052c:	f001 fe20 	bl	8002170 <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
#endif
#endif
	/*Configure GPIO pin : BTN_6_Pin */
	GPIO_InitStruct.Pin = BTN_6_Pin;
 8000530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_6_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4812      	ldr	r0, [pc, #72]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000546:	f001 fe13 	bl	8002170 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin | BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 800054a:	2378      	movs	r3, #120	@ 0x78
 800054c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <MX_GPIO_Init+0x130>)
 800055e:	f001 fe07 	bl	8002170 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_5_Pin */
	GPIO_InitStruct.Pin = BTN_5_Pin;
 8000562:	2380      	movs	r3, #128	@ 0x80
 8000564:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_5_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_GPIO_Init+0x130>)
 8000576:	f001 fdfb 	bl	8002170 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40010800 	.word	0x40010800

08000594 <button_handler>:

/* USER CODE BEGIN 4 */
void button_handler() {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	static bool flag_btn3 = false;
	static bool flag_btn4 = false;
	static bool flag_btn5 = false;
	static bool flag_btn6 = false;  // Some flags for buttons
	static uint8_t pagenum = 1;
	HAL_Delay(PILOT_FINGER_TAP_SPEED);
 8000598:	2096      	movs	r0, #150	@ 0x96
 800059a:	f000 fe31 	bl	8001200 <HAL_Delay>
	/* GEAR UP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 800059e:	2120      	movs	r1, #32
 80005a0:	486a      	ldr	r0, [pc, #424]	@ (800074c <button_handler+0x1b8>)
 80005a2:	f001 ff69 	bl	8002478 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d039      	beq.n	8000620 <button_handler+0x8c>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80005ac:	2140      	movs	r1, #64	@ 0x40
 80005ae:	4867      	ldr	r0, [pc, #412]	@ (800074c <button_handler+0x1b8>)
 80005b0:	f001 ff62 	bl	8002478 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d132      	bne.n	8000620 <button_handler+0x8c>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn3) {
 80005ba:	f000 fe17 	bl	80011ec <HAL_GetTick>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b63      	ldr	r3, [pc, #396]	@ (8000750 <button_handler+0x1bc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b96      	cmp	r3, #150	@ 0x96
 80005c8:	d92a      	bls.n	8000620 <button_handler+0x8c>
 80005ca:	4b62      	ldr	r3, [pc, #392]	@ (8000754 <button_handler+0x1c0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f083 0301 	eor.w	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d023      	beq.n	8000620 <button_handler+0x8c>
		flag_btn3 = !flag_btn3;
 80005d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000754 <button_handler+0x1c0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b58      	ldr	r3, [pc, #352]	@ (8000754 <button_handler+0x1c0>)
 80005f4:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR UP MSG HERE */
		msg_type = gear_up;
 80005f6:	4b58      	ldr	r3, [pc, #352]	@ (8000758 <button_handler+0x1c4>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 80005fc:	4b56      	ldr	r3, [pc, #344]	@ (8000758 <button_handler+0x1c4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f9ff 	bl	8000a04 <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060a:	4850      	ldr	r0, [pc, #320]	@ (800074c <button_handler+0x1b8>)
 800060c:	f001 ff63 	bl	80024d6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000610:	2064      	movs	r0, #100	@ 0x64
 8000612:	f000 fdf5 	bl	8001200 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000616:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061a:	484c      	ldr	r0, [pc, #304]	@ (800074c <button_handler+0x1b8>)
 800061c:	f001 ff5b 	bl	80024d6 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && flag_btn3) {
 8000620:	2120      	movs	r1, #32
 8000622:	484a      	ldr	r0, [pc, #296]	@ (800074c <button_handler+0x1b8>)
 8000624:	f001 ff28 	bl	8002478 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d109      	bne.n	8000642 <button_handler+0xae>
 800062e:	4b49      	ldr	r3, [pc, #292]	@ (8000754 <button_handler+0x1c0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d005      	beq.n	8000642 <button_handler+0xae>
		flag_btn3 = 0;
 8000636:	4b47      	ldr	r3, [pc, #284]	@ (8000754 <button_handler+0x1c0>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800063c:	2064      	movs	r0, #100	@ 0x64
 800063e:	f000 fddf 	bl	8001200 <HAL_Delay>
	}
	/* GEAR DOWN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 8000642:	2140      	movs	r1, #64	@ 0x40
 8000644:	4841      	ldr	r0, [pc, #260]	@ (800074c <button_handler+0x1b8>)
 8000646:	f001 ff17 	bl	8002478 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d039      	beq.n	80006c4 <button_handler+0x130>
			&& !HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000650:	2120      	movs	r1, #32
 8000652:	483e      	ldr	r0, [pc, #248]	@ (800074c <button_handler+0x1b8>)
 8000654:	f001 ff10 	bl	8002478 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d132      	bne.n	80006c4 <button_handler+0x130>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn4) {
 800065e:	f000 fdc5 	bl	80011ec <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	4b3a      	ldr	r3, [pc, #232]	@ (8000750 <button_handler+0x1bc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	2b96      	cmp	r3, #150	@ 0x96
 800066c:	d92a      	bls.n	80006c4 <button_handler+0x130>
 800066e:	4b3b      	ldr	r3, [pc, #236]	@ (800075c <button_handler+0x1c8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f083 0301 	eor.w	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d023      	beq.n	80006c4 <button_handler+0x130>
		flag_btn4 = !flag_btn4;
 800067c:	4b37      	ldr	r3, [pc, #220]	@ (800075c <button_handler+0x1c8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f083 0301 	eor.w	r3, r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b31      	ldr	r3, [pc, #196]	@ (800075c <button_handler+0x1c8>)
 8000698:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR DOWN MSG HERE */
		msg_type = gear_down;
 800069a:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <button_handler+0x1c4>)
 800069c:	2203      	movs	r2, #3
 800069e:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 80006a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <button_handler+0x1c4>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f9ad 	bl	8000a04 <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4827      	ldr	r0, [pc, #156]	@ (800074c <button_handler+0x1b8>)
 80006b0:	f001 ff11 	bl	80024d6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	@ 0x64
 80006b6:	f000 fda3 	bl	8001200 <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80006ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006be:	4823      	ldr	r0, [pc, #140]	@ (800074c <button_handler+0x1b8>)
 80006c0:	f001 ff09 	bl	80024d6 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn4) {
 80006c4:	2140      	movs	r1, #64	@ 0x40
 80006c6:	4821      	ldr	r0, [pc, #132]	@ (800074c <button_handler+0x1b8>)
 80006c8:	f001 fed6 	bl	8002478 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d115      	bne.n	80006fe <button_handler+0x16a>
 80006d2:	4b22      	ldr	r3, [pc, #136]	@ (800075c <button_handler+0x1c8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d011      	beq.n	80006fe <button_handler+0x16a>
		flag_btn4 = !flag_btn4;
 80006da:	4b20      	ldr	r3, [pc, #128]	@ (800075c <button_handler+0x1c8>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <button_handler+0x1c8>)
 80006f6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006f8:	2064      	movs	r0, #100	@ 0x64
 80006fa:	f000 fd81 	bl	8001200 <HAL_Delay>
	}
	/* ENGINE STARTUP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)
 80006fe:	2108      	movs	r1, #8
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <button_handler+0x1b8>)
 8000702:	f001 feb9 	bl	8002478 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d04a      	beq.n	80007a2 <button_handler+0x20e>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn1) {
 800070c:	f000 fd6e 	bl	80011ec <HAL_GetTick>
 8000710:	4602      	mov	r2, r0
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <button_handler+0x1bc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	2b96      	cmp	r3, #150	@ 0x96
 800071a:	d942      	bls.n	80007a2 <button_handler+0x20e>
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <button_handler+0x1cc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f083 0301 	eor.w	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d03b      	beq.n	80007a2 <button_handler+0x20e>
		flag_btn1 = !flag_btn1;
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <button_handler+0x1cc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <button_handler+0x1cc>)
 8000746:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 8000748:	e024      	b.n	8000794 <button_handler+0x200>
 800074a:	bf00      	nop
 800074c:	40010c00 	.word	0x40010c00
 8000750:	20000130 	.word	0x20000130
 8000754:	2000017a 	.word	0x2000017a
 8000758:	20000003 	.word	0x20000003
 800075c:	2000017b 	.word	0x2000017b
 8000760:	2000017c 	.word	0x2000017c
			/* SEND CAN MSG ENGINE STARTUP HERE */
			msg_type = engn_start;
 8000764:	4b9c      	ldr	r3, [pc, #624]	@ (80009d8 <button_handler+0x444>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
			can_msg_handler(msg_type);
 800076a:	4b9b      	ldr	r3, [pc, #620]	@ (80009d8 <button_handler+0x444>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f948 	bl	8000a04 <can_msg_handler>
			HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fd43 	bl	8001200 <HAL_Delay>
			/* ENGINE STARTUP SWITCH IS NOT LATCHING ! */
#if DEBUG == 1
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800077a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077e:	4897      	ldr	r0, [pc, #604]	@ (80009dc <button_handler+0x448>)
 8000780:	f001 fea9 	bl	80024d6 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	@ 0x64
 8000786:	f000 fd3b 	bl	8001200 <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800078a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078e:	4893      	ldr	r0, [pc, #588]	@ (80009dc <button_handler+0x448>)
 8000790:	f001 fea1 	bl	80024d6 <HAL_GPIO_TogglePin>
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 8000794:	2108      	movs	r1, #8
 8000796:	4891      	ldr	r0, [pc, #580]	@ (80009dc <button_handler+0x448>)
 8000798:	f001 fe6e 	bl	8002478 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1e0      	bne.n	8000764 <button_handler+0x1d0>
#endif
		}
	}
	if (!HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && flag_btn1) {
 80007a2:	2108      	movs	r1, #8
 80007a4:	488d      	ldr	r0, [pc, #564]	@ (80009dc <button_handler+0x448>)
 80007a6:	f001 fe67 	bl	8002478 <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d115      	bne.n	80007dc <button_handler+0x248>
 80007b0:	4b8b      	ldr	r3, [pc, #556]	@ (80009e0 <button_handler+0x44c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d011      	beq.n	80007dc <button_handler+0x248>
		flag_btn1 = !flag_btn1;
 80007b8:	4b89      	ldr	r3, [pc, #548]	@ (80009e0 <button_handler+0x44c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f083 0301 	eor.w	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b83      	ldr	r3, [pc, #524]	@ (80009e0 <button_handler+0x44c>)
 80007d4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	@ 0x64
 80007d8:	f000 fd12 	bl	8001200 <HAL_Delay>
	}
	/* ENGINE STOP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin)
 80007dc:	2110      	movs	r1, #16
 80007de:	487f      	ldr	r0, [pc, #508]	@ (80009dc <button_handler+0x448>)
 80007e0:	f001 fe4a 	bl	8002478 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d032      	beq.n	8000850 <button_handler+0x2bc>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn2) {
 80007ea:	f000 fcff 	bl	80011ec <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	4b7c      	ldr	r3, [pc, #496]	@ (80009e4 <button_handler+0x450>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	2b96      	cmp	r3, #150	@ 0x96
 80007f8:	d92a      	bls.n	8000850 <button_handler+0x2bc>
 80007fa:	4b7b      	ldr	r3, [pc, #492]	@ (80009e8 <button_handler+0x454>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f083 0301 	eor.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d023      	beq.n	8000850 <button_handler+0x2bc>
		flag_btn2 = !flag_btn2;
 8000808:	4b77      	ldr	r3, [pc, #476]	@ (80009e8 <button_handler+0x454>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f083 0301 	eor.w	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b71      	ldr	r3, [pc, #452]	@ (80009e8 <button_handler+0x454>)
 8000824:	701a      	strb	r2, [r3, #0]
		/* SEND CAN STOP ENGINE MSG HERE */
		msg_type = engn_stop;
 8000826:	4b6c      	ldr	r3, [pc, #432]	@ (80009d8 <button_handler+0x444>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 800082c:	4b6a      	ldr	r3, [pc, #424]	@ (80009d8 <button_handler+0x444>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f8e7 	bl	8000a04 <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000836:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800083a:	4868      	ldr	r0, [pc, #416]	@ (80009dc <button_handler+0x448>)
 800083c:	f001 fe4b 	bl	80024d6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000840:	2064      	movs	r0, #100	@ 0x64
 8000842:	f000 fcdd 	bl	8001200 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084a:	4864      	ldr	r0, [pc, #400]	@ (80009dc <button_handler+0x448>)
 800084c:	f001 fe43 	bl	80024d6 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && flag_btn2) {
 8000850:	2110      	movs	r1, #16
 8000852:	4862      	ldr	r0, [pc, #392]	@ (80009dc <button_handler+0x448>)
 8000854:	f001 fe10 	bl	8002478 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d115      	bne.n	800088a <button_handler+0x2f6>
 800085e:	4b62      	ldr	r3, [pc, #392]	@ (80009e8 <button_handler+0x454>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d011      	beq.n	800088a <button_handler+0x2f6>
		flag_btn2 = !flag_btn2;
 8000866:	4b60      	ldr	r3, [pc, #384]	@ (80009e8 <button_handler+0x454>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f083 0301 	eor.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b59      	ldr	r3, [pc, #356]	@ (80009e8 <button_handler+0x454>)
 8000882:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000884:	2064      	movs	r0, #100	@ 0x64
 8000886:	f000 fcbb 	bl	8001200 <HAL_Delay>
	}
	/* NEUTRAL GEAR HANDLER */
	if (HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin)
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	4853      	ldr	r0, [pc, #332]	@ (80009dc <button_handler+0x448>)
 800088e:	f001 fdf3 	bl	8002478 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d028      	beq.n	80008ea <button_handler+0x356>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn5) {
 8000898:	f000 fca8 	bl	80011ec <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	4b51      	ldr	r3, [pc, #324]	@ (80009e4 <button_handler+0x450>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b96      	cmp	r3, #150	@ 0x96
 80008a6:	d920      	bls.n	80008ea <button_handler+0x356>
 80008a8:	4b50      	ldr	r3, [pc, #320]	@ (80009ec <button_handler+0x458>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f083 0301 	eor.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d019      	beq.n	80008ea <button_handler+0x356>
		flag_btn5 = !flag_btn5;
 80008b6:	4b4d      	ldr	r3, [pc, #308]	@ (80009ec <button_handler+0x458>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf14      	ite	ne
 80008be:	2301      	movne	r3, #1
 80008c0:	2300      	moveq	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f083 0301 	eor.w	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b46      	ldr	r3, [pc, #280]	@ (80009ec <button_handler+0x458>)
 80008d2:	701a      	strb	r2, [r3, #0]
		/* SEND CAN NEUTRAL GEAR HERE */
		msg_type = gear_neutral;
 80008d4:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <button_handler+0x444>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 80008da:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <button_handler+0x444>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f890 	bl	8000a04 <can_msg_handler>
		HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f000 fc8b 	bl	8001200 <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin) && flag_btn5) {
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	483b      	ldr	r0, [pc, #236]	@ (80009dc <button_handler+0x448>)
 80008ee:	f001 fdc3 	bl	8002478 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d112      	bne.n	800091e <button_handler+0x38a>
 80008f8:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <button_handler+0x458>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00e      	beq.n	800091e <button_handler+0x38a>
		flag_btn5 = !flag_btn5;
 8000900:	4b3a      	ldr	r3, [pc, #232]	@ (80009ec <button_handler+0x458>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf14      	ite	ne
 8000908:	2301      	movne	r3, #1
 800090a:	2300      	moveq	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b34      	ldr	r3, [pc, #208]	@ (80009ec <button_handler+0x458>)
 800091c:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	/* NEXT SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin)
 800091e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000922:	4833      	ldr	r0, [pc, #204]	@ (80009f0 <button_handler+0x45c>)
 8000924:	f001 fda8 	bl	8002478 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d037      	beq.n	800099e <button_handler+0x40a>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn6) {
 800092e:	f000 fc5d 	bl	80011ec <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <button_handler+0x450>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b96      	cmp	r3, #150	@ 0x96
 800093c:	d92f      	bls.n	800099e <button_handler+0x40a>
 800093e:	4b2d      	ldr	r3, [pc, #180]	@ (80009f4 <button_handler+0x460>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d028      	beq.n	800099e <button_handler+0x40a>
		flag_btn6 = !flag_btn6;
 800094c:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <button_handler+0x460>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <button_handler+0x460>)
 8000968:	701a      	strb	r2, [r3, #0]
		pagenum = pagenum + 1;
 800096a:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <button_handler+0x464>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <button_handler+0x464>)
 8000974:	701a      	strb	r2, [r3, #0]
		if (pagenum >= 6 || pagenum < 0) {
 8000976:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <button_handler+0x464>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b05      	cmp	r3, #5
 800097c:	d902      	bls.n	8000984 <button_handler+0x3f0>
			pagenum = 1;
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <button_handler+0x464>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
		}
		/* SEND USART NEXT SCREEN MSG HERE */
		sprintf(cmd1, "page page%d", pagenum);
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <button_handler+0x464>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	491c      	ldr	r1, [pc, #112]	@ (80009fc <button_handler+0x468>)
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <button_handler+0x46c>)
 800098e:	f002 fbef 	bl	8003170 <siprintf>
		nextion_send(cmd1);
 8000992:	481b      	ldr	r0, [pc, #108]	@ (8000a00 <button_handler+0x46c>)
 8000994:	f7ff fbe2 	bl	800015c <nextion_send>
		HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 fc31 	bl	8001200 <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin) && flag_btn6) {
 800099e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a2:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <button_handler+0x45c>)
 80009a4:	f001 fd68 	bl	8002478 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d112      	bne.n	80009d4 <button_handler+0x440>
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <button_handler+0x460>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00e      	beq.n	80009d4 <button_handler+0x440>
		flag_btn6 = !flag_btn6;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <button_handler+0x460>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f083 0301 	eor.w	r3, r3, #1
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <button_handler+0x460>)
 80009d2:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000003 	.word	0x20000003
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	2000017c 	.word	0x2000017c
 80009e4:	20000130 	.word	0x20000130
 80009e8:	2000017d 	.word	0x2000017d
 80009ec:	2000017e 	.word	0x2000017e
 80009f0:	40010800 	.word	0x40010800
 80009f4:	2000017f 	.word	0x2000017f
 80009f8:	20000004 	.word	0x20000004
 80009fc:	08003ae8 	.word	0x08003ae8
 8000a00:	20000180 	.word	0x20000180

08000a04 <can_msg_handler>:
int can_msg_handler(uint8_t typemsg) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	switch (typemsg) {
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	f200 8085 	bhi.w	8000b20 <can_msg_handler+0x11c>
 8000a16:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <can_msg_handler+0x18>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a31 	.word	0x08000a31
 8000a20:	08000a61 	.word	0x08000a61
 8000a24:	08000a91 	.word	0x08000a91
 8000a28:	08000ac1 	.word	0x08000ac1
 8000a2c:	08000af1 	.word	0x08000af1
	case engn_start:
		/* MSG START ENGINE */
		TxHeader.StdId = 0x643;
 8000a30:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <can_msg_handler+0x130>)
 8000a32:	f240 6243 	movw	r2, #1603	@ 0x643
 8000a36:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000001; //using binary system to make bit set more clear
 8000a38:	4b3f      	ldr	r3, [pc, #252]	@ (8000b38 <can_msg_handler+0x134>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000a3e:	bf00      	nop
 8000a40:	483e      	ldr	r0, [pc, #248]	@ (8000b3c <can_msg_handler+0x138>)
 8000a42:	f000 fed8 	bl	80017f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f9      	beq.n	8000a40 <can_msg_handler+0x3c>
			; //CAN SW#0
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b40 <can_msg_handler+0x13c>)
 8000a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b38 <can_msg_handler+0x134>)
 8000a50:	4938      	ldr	r1, [pc, #224]	@ (8000b34 <can_msg_handler+0x130>)
 8000a52:	483a      	ldr	r0, [pc, #232]	@ (8000b3c <can_msg_handler+0x138>)
 8000a54:	f000 fe00 	bl	8001658 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000a58:	4b37      	ldr	r3, [pc, #220]	@ (8000b38 <can_msg_handler+0x134>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	711a      	strb	r2, [r3, #4]
		break;
 8000a5e:	e060      	b.n	8000b22 <can_msg_handler+0x11e>
	case engn_stop:
		/* MSG STOP ENGINE */
		TxHeader.StdId = 0x642;
 8000a60:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <can_msg_handler+0x130>)
 8000a62:	f240 6242 	movw	r2, #1602	@ 0x642
 8000a66:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000010; //CAN SW#1
 8000a68:	4b33      	ldr	r3, [pc, #204]	@ (8000b38 <can_msg_handler+0x134>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000a6e:	bf00      	nop
 8000a70:	4832      	ldr	r0, [pc, #200]	@ (8000b3c <can_msg_handler+0x138>)
 8000a72:	f000 fec0 	bl	80017f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f9      	beq.n	8000a70 <can_msg_handler+0x6c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000a7c:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <can_msg_handler+0x13c>)
 8000a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <can_msg_handler+0x134>)
 8000a80:	492c      	ldr	r1, [pc, #176]	@ (8000b34 <can_msg_handler+0x130>)
 8000a82:	482e      	ldr	r0, [pc, #184]	@ (8000b3c <can_msg_handler+0x138>)
 8000a84:	f000 fde8 	bl	8001658 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000a88:	4b2b      	ldr	r3, [pc, #172]	@ (8000b38 <can_msg_handler+0x134>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	711a      	strb	r2, [r3, #4]
		break;
 8000a8e:	e048      	b.n	8000b22 <can_msg_handler+0x11e>
	case gear_up:
		/* MSG GEAR UP */
		TxHeader.StdId = 0x642;
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <can_msg_handler+0x130>)
 8000a92:	f240 6242 	movw	r2, #1602	@ 0x642
 8000a96:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000100; //CAN SW#2
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <can_msg_handler+0x134>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000a9e:	bf00      	nop
 8000aa0:	4826      	ldr	r0, [pc, #152]	@ (8000b3c <can_msg_handler+0x138>)
 8000aa2:	f000 fea8 	bl	80017f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <can_msg_handler+0x9c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000aac:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <can_msg_handler+0x13c>)
 8000aae:	4a22      	ldr	r2, [pc, #136]	@ (8000b38 <can_msg_handler+0x134>)
 8000ab0:	4920      	ldr	r1, [pc, #128]	@ (8000b34 <can_msg_handler+0x130>)
 8000ab2:	4822      	ldr	r0, [pc, #136]	@ (8000b3c <can_msg_handler+0x138>)
 8000ab4:	f000 fdd0 	bl	8001658 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <can_msg_handler+0x134>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	711a      	strb	r2, [r3, #4]
		break;
 8000abe:	e030      	b.n	8000b22 <can_msg_handler+0x11e>
	case gear_down:
		/* MSG GEAR DOWN */
		TxHeader.StdId = 0x642;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <can_msg_handler+0x130>)
 8000ac2:	f240 6242 	movw	r2, #1602	@ 0x642
 8000ac6:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00001000; //CAN SW #3
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <can_msg_handler+0x134>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000ace:	bf00      	nop
 8000ad0:	481a      	ldr	r0, [pc, #104]	@ (8000b3c <can_msg_handler+0x138>)
 8000ad2:	f000 fe90 	bl	80017f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f9      	beq.n	8000ad0 <can_msg_handler+0xcc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <can_msg_handler+0x13c>)
 8000ade:	4a16      	ldr	r2, [pc, #88]	@ (8000b38 <can_msg_handler+0x134>)
 8000ae0:	4914      	ldr	r1, [pc, #80]	@ (8000b34 <can_msg_handler+0x130>)
 8000ae2:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <can_msg_handler+0x138>)
 8000ae4:	f000 fdb8 	bl	8001658 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <can_msg_handler+0x134>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	711a      	strb	r2, [r3, #4]
		break;
 8000aee:	e018      	b.n	8000b22 <can_msg_handler+0x11e>
	case gear_neutral:
		/* MSG GEAR NEUTRAL */
		TxHeader.StdId = 0x642;
 8000af0:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <can_msg_handler+0x130>)
 8000af2:	f240 6242 	movw	r2, #1602	@ 0x642
 8000af6:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00010000; //CAN SW#4
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <can_msg_handler+0x134>)
 8000afa:	2210      	movs	r2, #16
 8000afc:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000afe:	bf00      	nop
 8000b00:	480e      	ldr	r0, [pc, #56]	@ (8000b3c <can_msg_handler+0x138>)
 8000b02:	f000 fe78 	bl	80017f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <can_msg_handler+0xfc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <can_msg_handler+0x13c>)
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <can_msg_handler+0x134>)
 8000b10:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <can_msg_handler+0x130>)
 8000b12:	480a      	ldr	r0, [pc, #40]	@ (8000b3c <can_msg_handler+0x138>)
 8000b14:	f000 fda0 	bl	8001658 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <can_msg_handler+0x134>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	711a      	strb	r2, [r3, #4]
		break;
 8000b1e:	e000      	b.n	8000b22 <can_msg_handler+0x11e>
	default:
		/* MSG NONE */
		break;
 8000b20:	bf00      	nop
	}
	msg_type = msg_none; // SET NONE TYPE MSG
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <can_msg_handler+0x140>)
 8000b24:	2205      	movs	r2, #5
 8000b26:	701a      	strb	r2, [r3, #0]
	return 0; // return OK value to prevent endless loop
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000f0 	.word	0x200000f0
 8000b38:	20000124 	.word	0x20000124
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	2000012c 	.word	0x2000012c
 8000b44:	20000003 	.word	0x20000003

08000b48 <data_update_handler>:
void data_update_handler() {
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	ECU.RPM = RxData.x600[1] << 8;
 8000b4c:	4b41      	ldr	r3, [pc, #260]	@ (8000c54 <data_update_handler+0x10c>)
 8000b4e:	7a5b      	ldrb	r3, [r3, #9]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b40      	ldr	r3, [pc, #256]	@ (8000c58 <data_update_handler+0x110>)
 8000b56:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM + RxData.x600[0];
 8000b58:	4b3f      	ldr	r3, [pc, #252]	@ (8000c58 <data_update_handler+0x110>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c54 <data_update_handler+0x10c>)
 8000b5e:	7a12      	ldrb	r2, [r2, #8]
 8000b60:	4413      	add	r3, r2
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b3c      	ldr	r3, [pc, #240]	@ (8000c58 <data_update_handler+0x110>)
 8000b66:	801a      	strh	r2, [r3, #0]
	ECU.TPS = RxData.x600[2];
 8000b68:	4b3a      	ldr	r3, [pc, #232]	@ (8000c54 <data_update_handler+0x10c>)
 8000b6a:	7a9a      	ldrb	r2, [r3, #10]
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <data_update_handler+0x110>)
 8000b6e:	759a      	strb	r2, [r3, #22]
	ECU.MAP = RxData.x600[5] << 8;
 8000b70:	4b38      	ldr	r3, [pc, #224]	@ (8000c54 <data_update_handler+0x10c>)
 8000b72:	7b5b      	ldrb	r3, [r3, #13]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <data_update_handler+0x110>)
 8000b7a:	805a      	strh	r2, [r3, #2]
	ECU.MAP = ECU.MAP + RxData.x600[4];
 8000b7c:	4b36      	ldr	r3, [pc, #216]	@ (8000c58 <data_update_handler+0x110>)
 8000b7e:	885b      	ldrh	r3, [r3, #2]
 8000b80:	4a34      	ldr	r2, [pc, #208]	@ (8000c54 <data_update_handler+0x10c>)
 8000b82:	7b12      	ldrb	r2, [r2, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <data_update_handler+0x110>)
 8000b8a:	805a      	strh	r2, [r3, #2]
	//0x600 {0_RPM, 1_RPM, 2_TPS, 3_IAT, 4_MAP, 5_MAP, 6_INJPW, 7_INJPW}
	ECU.AIN1 = RxData.x601[0] + RxData.x601[1];
 8000b8c:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <data_update_handler+0x10c>)
 8000b8e:	7c1b      	ldrb	r3, [r3, #16]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <data_update_handler+0x10c>)
 8000b94:	7c5b      	ldrb	r3, [r3, #17]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <data_update_handler+0x110>)
 8000b9c:	80da      	strh	r2, [r3, #6]
	ECU.AIN2 = RxData.x601[2] + RxData.x601[3];
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <data_update_handler+0x10c>)
 8000ba0:	7c9b      	ldrb	r3, [r3, #18]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <data_update_handler+0x10c>)
 8000ba6:	7cdb      	ldrb	r3, [r3, #19]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b2a      	ldr	r3, [pc, #168]	@ (8000c58 <data_update_handler+0x110>)
 8000bae:	811a      	strh	r2, [r3, #8]
	ECU.AIN3 = RxData.x601[4] + RxData.x601[5];
 8000bb0:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <data_update_handler+0x10c>)
 8000bb2:	7d1b      	ldrb	r3, [r3, #20]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <data_update_handler+0x10c>)
 8000bb8:	7d5b      	ldrb	r3, [r3, #21]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <data_update_handler+0x110>)
 8000bc0:	815a      	strh	r2, [r3, #10]
	ECU.AIN4 = RxData.x601[6] + RxData.x601[7];
 8000bc2:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <data_update_handler+0x10c>)
 8000bc4:	7d9b      	ldrb	r3, [r3, #22]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <data_update_handler+0x10c>)
 8000bca:	7ddb      	ldrb	r3, [r3, #23]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <data_update_handler+0x110>)
 8000bd2:	819a      	strh	r2, [r3, #12]
	//0x601 {0_AIN1, 1_AIN1, 2_AIN2, 3_AIN2, 4_AIN3, 5_AIN3,6_AIN4, 7_AIN4}
	ECU.VSPD = RxData.x602[0] + RxData.x602[1];
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <data_update_handler+0x10c>)
 8000bd6:	7e1b      	ldrb	r3, [r3, #24]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <data_update_handler+0x10c>)
 8000bdc:	7e5b      	ldrb	r3, [r3, #25]
 8000bde:	4413      	add	r3, r2
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <data_update_handler+0x110>)
 8000be4:	81da      	strh	r2, [r3, #14]
	ECU.BARO = RxData.x602[3];
 8000be6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <data_update_handler+0x10c>)
 8000be8:	7eda      	ldrb	r2, [r3, #27]
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <data_update_handler+0x110>)
 8000bec:	75da      	strb	r2, [r3, #23]
	ECU.OILT = RxData.x602[4];
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <data_update_handler+0x10c>)
 8000bf0:	7f1a      	ldrb	r2, [r3, #28]
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <data_update_handler+0x110>)
 8000bf4:	761a      	strb	r2, [r3, #24]
	ECU.FUELP = RxData.x602[5];
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <data_update_handler+0x10c>)
 8000bf8:	7f5a      	ldrb	r2, [r3, #29]
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <data_update_handler+0x110>)
 8000bfc:	769a      	strb	r2, [r3, #26]
	ECU.CLT = RxData.x602[7] << 8;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <data_update_handler+0x10c>)
 8000c00:	7fdb      	ldrb	r3, [r3, #31]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <data_update_handler+0x110>)
 8000c08:	829a      	strh	r2, [r3, #20]
	ECU.CLT = ECU.CLT + RxData.x602[6];
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <data_update_handler+0x110>)
 8000c0c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <data_update_handler+0x10c>)
 8000c14:	7f92      	ldrb	r2, [r2, #30]
 8000c16:	4413      	add	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <data_update_handler+0x110>)
 8000c1e:	829a      	strh	r2, [r3, #20]
	//0x602 {0_VSPD, 1_VSPD, 2_BARO, 3_OILT, 4_OILP, 5_FUELP, 6_CLT, 7_CLT}
	ECU.GEAR = RxData.x604[0];
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <data_update_handler+0x10c>)
 8000c22:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <data_update_handler+0x110>)
 8000c28:	76da      	strb	r2, [r3, #27]
	ECU.BATT = RxData.x604[3] << 8;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <data_update_handler+0x10c>)
 8000c2c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <data_update_handler+0x110>)
 8000c36:	821a      	strh	r2, [r3, #16]
	ECU.BATT = ECU.BATT + RxData.x604[2];
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <data_update_handler+0x110>)
 8000c3a:	8a1b      	ldrh	r3, [r3, #16]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <data_update_handler+0x10c>)
 8000c3e:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8000c42:	4413      	add	r3, r2
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <data_update_handler+0x110>)
 8000c48:	821a      	strh	r2, [r3, #16]
	//0x604 {0_GEAR, 1_ECUTEMP, 2_BATT, 3_BATT, 4_ERRFLAG, 5_ERRFLAG, 6_FLAGS1, 7_ETHANOL}
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000134 	.word	0x20000134
 8000c58:	2000015c 	.word	0x2000015c

08000c5c <data_send_handler>:
void data_send_handler(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	//TODO: Add cmd send for last variables
	static char cmd[50] = { 0 };
	sprintf(cmd, "RP.txt=\"%d\"", ECU.RPM);
 8000c60:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <data_send_handler+0xc0>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	492e      	ldr	r1, [pc, #184]	@ (8000d20 <data_send_handler+0xc4>)
 8000c68:	482e      	ldr	r0, [pc, #184]	@ (8000d24 <data_send_handler+0xc8>)
 8000c6a:	f002 fa81 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000c6e:	482d      	ldr	r0, [pc, #180]	@ (8000d24 <data_send_handler+0xc8>)
 8000c70:	f7ff fa74 	bl	800015c <nextion_send>
	sprintf(cmd, "GE.txt=\"%d\"", ECU.GEAR);
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <data_send_handler+0xc0>)
 8000c76:	7edb      	ldrb	r3, [r3, #27]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	492b      	ldr	r1, [pc, #172]	@ (8000d28 <data_send_handler+0xcc>)
 8000c7c:	4829      	ldr	r0, [pc, #164]	@ (8000d24 <data_send_handler+0xc8>)
 8000c7e:	f002 fa77 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000c82:	4828      	ldr	r0, [pc, #160]	@ (8000d24 <data_send_handler+0xc8>)
 8000c84:	f7ff fa6a 	bl	800015c <nextion_send>
	sprintf(cmd, "SP.txt=\"%d\"", ECU.VSPD);
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <data_send_handler+0xc0>)
 8000c8a:	89db      	ldrh	r3, [r3, #14]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4927      	ldr	r1, [pc, #156]	@ (8000d2c <data_send_handler+0xd0>)
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <data_send_handler+0xc8>)
 8000c92:	f002 fa6d 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000c96:	4823      	ldr	r0, [pc, #140]	@ (8000d24 <data_send_handler+0xc8>)
 8000c98:	f7ff fa60 	bl	800015c <nextion_send>
	sprintf(cmd, "VO.txt=\"%d\"", ECU.BATT);
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <data_send_handler+0xc0>)
 8000c9e:	8a1b      	ldrh	r3, [r3, #16]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4923      	ldr	r1, [pc, #140]	@ (8000d30 <data_send_handler+0xd4>)
 8000ca4:	481f      	ldr	r0, [pc, #124]	@ (8000d24 <data_send_handler+0xc8>)
 8000ca6:	f002 fa63 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000caa:	481e      	ldr	r0, [pc, #120]	@ (8000d24 <data_send_handler+0xc8>)
 8000cac:	f7ff fa56 	bl	800015c <nextion_send>
	sprintf(cmd, "OI.txt=\"%d\"", ECU.OILT);
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <data_send_handler+0xc0>)
 8000cb2:	7e1b      	ldrb	r3, [r3, #24]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	491f      	ldr	r1, [pc, #124]	@ (8000d34 <data_send_handler+0xd8>)
 8000cb8:	481a      	ldr	r0, [pc, #104]	@ (8000d24 <data_send_handler+0xc8>)
 8000cba:	f002 fa59 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <data_send_handler+0xc8>)
 8000cc0:	f7ff fa4c 	bl	800015c <nextion_send>
	sprintf(cmd, "WA.txt=\"%d\"", ECU.CLT);
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <data_send_handler+0xc0>)
 8000cc6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	491a      	ldr	r1, [pc, #104]	@ (8000d38 <data_send_handler+0xdc>)
 8000cce:	4815      	ldr	r0, [pc, #84]	@ (8000d24 <data_send_handler+0xc8>)
 8000cd0:	f002 fa4e 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000cd4:	4813      	ldr	r0, [pc, #76]	@ (8000d24 <data_send_handler+0xc8>)
 8000cd6:	f7ff fa41 	bl	800015c <nextion_send>
	sprintf(cmd, "TP.txt=\"%d\"", ECU.TPS);
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <data_send_handler+0xc0>)
 8000cdc:	7d9b      	ldrb	r3, [r3, #22]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4916      	ldr	r1, [pc, #88]	@ (8000d3c <data_send_handler+0xe0>)
 8000ce2:	4810      	ldr	r0, [pc, #64]	@ (8000d24 <data_send_handler+0xc8>)
 8000ce4:	f002 fa44 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000ce8:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <data_send_handler+0xc8>)
 8000cea:	f7ff fa37 	bl	800015c <nextion_send>
	sprintf(cmd, "MA.txt=\"%d\"", ECU.MAP);
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <data_send_handler+0xc0>)
 8000cf0:	885b      	ldrh	r3, [r3, #2]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4912      	ldr	r1, [pc, #72]	@ (8000d40 <data_send_handler+0xe4>)
 8000cf6:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <data_send_handler+0xc8>)
 8000cf8:	f002 fa3a 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000cfc:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <data_send_handler+0xc8>)
 8000cfe:	f7ff fa2d 	bl	800015c <nextion_send>
	sprintf(cmd, "FU.txt=\"%d\"", ECU.FUELP);
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <data_send_handler+0xc0>)
 8000d04:	7e9b      	ldrb	r3, [r3, #26]
 8000d06:	461a      	mov	r2, r3
 8000d08:	490e      	ldr	r1, [pc, #56]	@ (8000d44 <data_send_handler+0xe8>)
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <data_send_handler+0xc8>)
 8000d0c:	f002 fa30 	bl	8003170 <siprintf>
	nextion_send(cmd);
 8000d10:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <data_send_handler+0xc8>)
 8000d12:	f7ff fa23 	bl	800015c <nextion_send>
	//add fan ECU stream msg
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000015c 	.word	0x2000015c
 8000d20:	08003af4 	.word	0x08003af4
 8000d24:	20000188 	.word	0x20000188
 8000d28:	08003b00 	.word	0x08003b00
 8000d2c:	08003b0c 	.word	0x08003b0c
 8000d30:	08003b18 	.word	0x08003b18
 8000d34:	08003b24 	.word	0x08003b24
 8000d38:	08003b30 	.word	0x08003b30
 8000d3c:	08003b3c 	.word	0x08003b3c
 8000d40:	08003b48 	.word	0x08003b48
 8000d44:	08003b54 	.word	0x08003b54

08000d48 <startup>:
void startup() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d52:	4823      	ldr	r0, [pc, #140]	@ (8000de0 <startup+0x98>)
 8000d54:	f001 fba7 	bl	80024a6 <HAL_GPIO_WritePin>
	TxHeader.StdId = 0x642;
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <startup+0x9c>)
 8000d5a:	f240 6242 	movw	r2, #1602	@ 0x642
 8000d5e:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <startup+0x9c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA; // CAN_RTR_REMOTE
 8000d66:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <startup+0x9c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;   // USE STANDART ID
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <startup+0x9c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <startup+0x9c>)
 8000d74:	2208      	movs	r2, #8
 8000d76:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <startup+0x9c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	751a      	strb	r2, [r3, #20]
	while (HAL_CAN_Start(&hcan) == HAL_ERROR)
 8000d7e:	bf00      	nop
 8000d80:	4819      	ldr	r0, [pc, #100]	@ (8000de8 <startup+0xa0>)
 8000d82:	f000 fc25 	bl	80015d0 <HAL_CAN_Start>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d0f9      	beq.n	8000d80 <startup+0x38>
		;
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4816      	ldr	r0, [pc, #88]	@ (8000de8 <startup+0xa0>)
 8000d90:	f000 fe86 	bl	8001aa0 <HAL_CAN_ActivateNotification>
	/* SOME LED BLINK FOR SUCCESSFUL STARTUP*/
#if DEBUG == 1
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <startup+0xa4>)
 8000d9c:	f001 fb83 	bl	80024a6 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000da0:	20c8      	movs	r0, #200	@ 0xc8
 8000da2:	f000 fa2d 	bl	8001200 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000dac:	480f      	ldr	r0, [pc, #60]	@ (8000dec <startup+0xa4>)
 8000dae:	f001 fb7a 	bl	80024a6 <HAL_GPIO_WritePin>
#endif
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <startup+0x98>)
 8000dba:	f001 fb74 	bl	80024a6 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000dbe:	20c8      	movs	r0, #200	@ 0xc8
 8000dc0:	f000 fa1e 	bl	8001200 <HAL_Delay>
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <startup+0x98>)
 8000dcc:	f001 fb6b 	bl	80024a6 <HAL_GPIO_WritePin>
	time_ms = HAL_GetTick();
 8000dd0:	f000 fa0c 	bl	80011ec <HAL_GetTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <startup+0xa8>)
 8000dd8:	6013      	str	r3, [r2, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40011000 	.word	0x40011000
 8000de4:	200000f0 	.word	0x200000f0
 8000de8:	20000080 	.word	0x20000080
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	20000130 	.word	0x20000130

08000df4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <Error_Handler+0x24>)
 8000e04:	f001 fb4f 	bl	80024a6 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8000e08:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e0c:	f000 f9f8 	bl	8001200 <HAL_Delay>
		HAL_NVIC_SystemReset();
 8000e10:	f001 f99d 	bl	800214e <HAL_NVIC_SystemReset>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000e14:	bf00      	nop
 8000e16:	e7f1      	b.n	8000dfc <Error_Handler+0x8>
 8000e18:	40011000 	.word	0x40011000

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <HAL_MspInit+0x5c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_MspInit+0x5c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_MspInit+0x5c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <HAL_MspInit+0x5c>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_MspInit+0x60>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_MspInit+0x60>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000

08000e80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f50 <HAL_CAN_MspInit+0xd0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d153      	bne.n	8000f48 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <HAL_CAN_MspInit+0xd4>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <HAL_CAN_MspInit+0xd4>)
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eaa:	61d3      	str	r3, [r2, #28]
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <HAL_CAN_MspInit+0xd4>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_CAN_MspInit+0xd4>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <HAL_CAN_MspInit+0xd4>)
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <HAL_CAN_MspInit+0xd4>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0308 	and.w	r3, r3, #8
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481c      	ldr	r0, [pc, #112]	@ (8000f58 <HAL_CAN_MspInit+0xd8>)
 8000ee6:	f001 f943 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4816      	ldr	r0, [pc, #88]	@ (8000f58 <HAL_CAN_MspInit+0xd8>)
 8000f00:	f001 f936 	bl	8002170 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_CAN_MspInit+0xdc>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_CAN_MspInit+0xdc>)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2014      	movs	r0, #20
 8000f2e:	f001 f8e4 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f32:	2014      	movs	r0, #20
 8000f34:	f001 f8fd 	bl	8002132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	2015      	movs	r0, #21
 8000f3e:	f001 f8dc 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f42:	2015      	movs	r0, #21
 8000f44:	f001 f8f5 	bl	8002132 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40006400 	.word	0x40006400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	40010000 	.word	0x40010000

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <HAL_UART_MspInit+0x8c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d131      	bne.n	8000fe4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_UART_MspInit+0x90>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fc6:	f001 f8d3 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fe0:	f001 f8c6 	bl	8002170 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <MemManage_Handler+0x4>

08001010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f8be 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001056:	f000 fd48 	bl	8001aea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000080 	.word	0x20000080

08001064 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <CAN1_RX1_IRQHandler+0x10>)
 800106a:	f000 fd3e 	bl	8001aea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000080 	.word	0x20000080

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f002 f88a 	bl	80031c0 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20005000 	.word	0x20005000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	200001bc 	.word	0x200001bc
 80010e0:	20000310 	.word	0x20000310

080010e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f0:	f7ff fff8 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480b      	ldr	r0, [pc, #44]	@ (8001124 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010f6:	490c      	ldr	r1, [pc, #48]	@ (8001128 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <LoopFillZerobss+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800110c:	4c09      	ldr	r4, [pc, #36]	@ (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f002 f857 	bl	80031cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff f8c1 	bl	80002a4 <main>
  bx lr
 8001122:	4770      	bx	lr
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800112c:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 8001130:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001134:	2000030c 	.word	0x2000030c

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_Init+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <HAL_Init+0x28>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 ffc9 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fe60 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 ffe5 	bl	8002156 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 ffa9 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000010 	.word	0x20000010
 80011c4:	2000000c 	.word	0x2000000c

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	@ (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000010 	.word	0x20000010
 80011e8:	200001c0 	.word	0x200001c0

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	@ (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200001c0 	.word	0x200001c0

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff0 	bl	80011ec <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffe0 	bl	80011ec <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000010 	.word	0x20000010

08001248 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0ed      	b.n	8001436 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fe0a 	bl	8000e80 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff ffb6 	bl	80011ec <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001282:	e012      	b.n	80012aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001284:	f7ff ffb2 	bl	80011ec <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90b      	bls.n	80012aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0c5      	b.n	8001436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0e5      	beq.n	8001284 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0202 	bic.w	r2, r2, #2
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff ff90 	bl	80011ec <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ce:	e012      	b.n	80012f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d0:	f7ff ff8c 	bl	80011ec <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b0a      	cmp	r3, #10
 80012dc:	d90b      	bls.n	80012f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2205      	movs	r2, #5
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e09f      	b.n	8001436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e5      	bne.n	80012d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e1b      	ldrb	r3, [r3, #24]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e007      	b.n	800132e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001356:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e9b      	ldrb	r3, [r3, #26]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d108      	bne.n	8001372 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0220 	orr.w	r2, r2, #32
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e007      	b.n	8001382 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0220 	bic.w	r2, r2, #32
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7edb      	ldrb	r3, [r3, #27]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0210 	bic.w	r2, r2, #16
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e007      	b.n	80013ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0210 	orr.w	r2, r2, #16
 80013aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7f1b      	ldrb	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0208 	orr.w	r2, r2, #8
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0208 	bic.w	r2, r2, #8
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7f5b      	ldrb	r3, [r3, #29]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0204 	orr.w	r2, r2, #4
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	ea42 0103 	orr.w	r1, r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800143e:	b480      	push	{r7}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001454:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <HAL_CAN_ConfigFilter+0x26>
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	2b02      	cmp	r3, #2
 8001460:	f040 80aa 	bne.w	80015b8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	2201      	movs	r2, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d123      	bne.n	80014e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	401a      	ands	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3248      	adds	r2, #72	@ 0x48
 80014c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014dc:	6979      	ldr	r1, [r7, #20]
 80014de:	3348      	adds	r3, #72	@ 0x48
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d122      	bne.n	8001534 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800150e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3248      	adds	r2, #72	@ 0x48
 8001514:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001528:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800152a:	6979      	ldr	r1, [r7, #20]
 800152c:	3348      	adds	r3, #72	@ 0x48
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800154e:	e007      	b.n	8001560 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d109      	bne.n	800157c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800157a:	e007      	b.n	800158c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	431a      	orrs	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015aa:	f023 0201 	bic.w	r2, r3, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e006      	b.n	80015c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d12e      	bne.n	8001642 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff fdf6 	bl	80011ec <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001602:	e012      	b.n	800162a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001604:	f7ff fdf2 	bl	80011ec <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d90b      	bls.n	800162a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2205      	movs	r2, #5
 8001622:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e012      	b.n	8001650 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e5      	bne.n	8001604 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e006      	b.n	8001650 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d003      	beq.n	8001684 <HAL_CAN_AddTxMessage+0x2c>
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	2b02      	cmp	r3, #2
 8001680:	f040 80ad 	bne.w	80017de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10a      	bne.n	80016a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8095 	beq.w	80017ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	0e1b      	lsrs	r3, r3, #24
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016ca:	68f9      	ldr	r1, [r7, #12]
 80016cc:	6809      	ldr	r1, [r1, #0]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3318      	adds	r3, #24
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	440b      	add	r3, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e00f      	b.n	80016fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3318      	adds	r3, #24
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	440b      	add	r3, r1
 80016fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3318      	adds	r3, #24
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	3304      	adds	r3, #4
 800170e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	7d1b      	ldrb	r3, [r3, #20]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d111      	bne.n	800173c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3318      	adds	r3, #24
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	6811      	ldr	r1, [r2, #0]
 800172c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3318      	adds	r3, #24
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	3304      	adds	r3, #4
 800173a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3307      	adds	r3, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	061a      	lsls	r2, r3, #24
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3306      	adds	r3, #6
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	041b      	lsls	r3, r3, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3305      	adds	r3, #5
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	4313      	orrs	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	3204      	adds	r2, #4
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	4610      	mov	r0, r2
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	6811      	ldr	r1, [r2, #0]
 8001764:	ea43 0200 	orr.w	r2, r3, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001772:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3303      	adds	r3, #3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	061a      	lsls	r2, r3, #24
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3302      	adds	r3, #2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4313      	orrs	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	7812      	ldrb	r2, [r2, #0]
 8001794:	4610      	mov	r0, r2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	6811      	ldr	r1, [r2, #0]
 800179a:	ea43 0200 	orr.w	r2, r3, r0
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	440b      	add	r3, r1
 80017a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80017a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3318      	adds	r3, #24
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6811      	ldr	r1, [r2, #0]
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3318      	adds	r3, #24
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e00e      	b.n	80017ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e006      	b.n	80017ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
  }
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3724      	adds	r7, #36	@ 0x24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d002      	beq.n	8001816 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d11d      	bne.n	8001852 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800185e:	b480      	push	{r7}
 8001860:	b087      	sub	sp, #28
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d003      	beq.n	8001882 <HAL_CAN_GetRxMessage+0x24>
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b02      	cmp	r3, #2
 800187e:	f040 8103 	bne.w	8001a88 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10e      	bne.n	80018a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0f7      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0e8      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	331b      	adds	r3, #27
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0204 	and.w	r2, r3, #4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	331b      	adds	r3, #27
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0d5b      	lsrs	r3, r3, #21
 80018f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	331b      	adds	r3, #27
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	331b      	adds	r3, #27
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0202 	and.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	331b      	adds	r3, #27
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2208      	movs	r2, #8
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	e00b      	b.n	8001962 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	331b      	adds	r3, #27
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 020f 	and.w	r2, r3, #15
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	331b      	adds	r3, #27
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	331b      	adds	r3, #27
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0a1a      	lsrs	r2, r3, #8
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0c1a      	lsrs	r2, r3, #16
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e1a      	lsrs	r2, r3, #24
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3303      	adds	r3, #3
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0a1a      	lsrs	r2, r3, #8
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	3305      	adds	r3, #5
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0c1a      	lsrs	r2, r3, #16
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e1a      	lsrs	r2, r3, #24
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3307      	adds	r3, #7
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d108      	bne.n	8001a74 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e007      	b.n	8001a84 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e006      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
  }
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d002      	beq.n	8001abe <HAL_CAN_ActivateNotification+0x1e>
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d109      	bne.n	8001ad2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6959      	ldr	r1, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e006      	b.n	8001ae0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
  }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	@ 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d07c      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d023      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f983 	bl	8001e58 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b52:	e016      	b.n	8001b82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b66:	e00c      	b.n	8001b82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7a:	e002      	b.n	8001b82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f986 	bl	8001e8e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d024      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f962 	bl	8001e6a <HAL_CAN_TxMailbox1CompleteCallback>
 8001ba6:	e016      	b.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bba:	e00c      	b.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	e002      	b.n	8001bd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f965 	bl	8001ea0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d024      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001be8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f941 	bl	8001e7c <HAL_CAN_TxMailbox2CompleteCallback>
 8001bfa:	e016      	b.n	8001c2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	e00c      	b.n	8001c2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	e002      	b.n	8001c2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f944 	bl	8001eb2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00c      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2208      	movs	r2, #8
 8001c68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f92a 	bl	8001ec4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7fe fa83 	bl	8000194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2210      	movs	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f90a 	bl	8001ee8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8f2 	bl	8001ed6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8f3 	bl	8001efa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8eb 	bl	8001f0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d07b      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d072      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d043      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03e      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001db8:	2b60      	cmp	r3, #96	@ 0x60
 8001dba:	d02b      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x32a>
 8001dbc:	2b60      	cmp	r3, #96	@ 0x60
 8001dbe:	d82e      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dc0:	2b50      	cmp	r3, #80	@ 0x50
 8001dc2:	d022      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x320>
 8001dc4:	2b50      	cmp	r3, #80	@ 0x50
 8001dc6:	d82a      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dc8:	2b40      	cmp	r3, #64	@ 0x40
 8001dca:	d019      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x316>
 8001dcc:	2b40      	cmp	r3, #64	@ 0x40
 8001dce:	d826      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dd0:	2b30      	cmp	r3, #48	@ 0x30
 8001dd2:	d010      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x30c>
 8001dd4:	2b30      	cmp	r3, #48	@ 0x30
 8001dd6:	d822      	bhi.n	8001e1e <HAL_CAN_IRQHandler+0x334>
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d002      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x2f8>
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d005      	beq.n	8001dec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001de0:	e01d      	b.n	8001e1e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dea:	e019      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001df4:	e014      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dfe:	e00f      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e08:	e00a      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e12:	e005      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e1c:	e000      	b.n	8001e20 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e1e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e2e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fa20 	bl	8000290 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
	...

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4906      	ldr	r1, [pc, #24]	@ (8001fb8 <__NVIC_EnableIRQ+0x34>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002078:	f3bf 8f4f 	dsb	sy
}
 800207c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <__NVIC_SystemReset+0x24>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002086:	4904      	ldr	r1, [pc, #16]	@ (8002098 <__NVIC_SystemReset+0x24>)
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <__NVIC_SystemReset+0x28>)
 800208a:	4313      	orrs	r3, r2
 800208c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800208e:	f3bf 8f4f 	dsb	sy
}
 8002092:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <__NVIC_SystemReset+0x20>
 8002098:	e000ed00 	.word	0xe000ed00
 800209c:	05fa0004 	.word	0x05fa0004

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff7a 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff17 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff2c 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff7a 	bl	8002010 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff49 	bl	8001fbc <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff1f 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002152:	f7ff ff8f 	bl	8002074 <__NVIC_SystemReset>

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ff9e 	bl	80020a0 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b08b      	sub	sp, #44	@ 0x2c
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e169      	b.n	8002458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002184:	2201      	movs	r2, #1
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 8158 	bne.w	8002452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a9a      	ldr	r2, [pc, #616]	@ (8002410 <HAL_GPIO_Init+0x2a0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d05e      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021ac:	4a98      	ldr	r2, [pc, #608]	@ (8002410 <HAL_GPIO_Init+0x2a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d875      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021b2:	4a98      	ldr	r2, [pc, #608]	@ (8002414 <HAL_GPIO_Init+0x2a4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d058      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021b8:	4a96      	ldr	r2, [pc, #600]	@ (8002414 <HAL_GPIO_Init+0x2a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d86f      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021be:	4a96      	ldr	r2, [pc, #600]	@ (8002418 <HAL_GPIO_Init+0x2a8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d052      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021c4:	4a94      	ldr	r2, [pc, #592]	@ (8002418 <HAL_GPIO_Init+0x2a8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d869      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021ca:	4a94      	ldr	r2, [pc, #592]	@ (800241c <HAL_GPIO_Init+0x2ac>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04c      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021d0:	4a92      	ldr	r2, [pc, #584]	@ (800241c <HAL_GPIO_Init+0x2ac>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d863      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021d6:	4a92      	ldr	r2, [pc, #584]	@ (8002420 <HAL_GPIO_Init+0x2b0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d046      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021dc:	4a90      	ldr	r2, [pc, #576]	@ (8002420 <HAL_GPIO_Init+0x2b0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d85d      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d82a      	bhi.n	800223c <HAL_GPIO_Init+0xcc>
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d859      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021ea:	a201      	add	r2, pc, #4	@ (adr r2, 80021f0 <HAL_GPIO_Init+0x80>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	0800226b 	.word	0x0800226b
 80021f4:	08002245 	.word	0x08002245
 80021f8:	08002257 	.word	0x08002257
 80021fc:	08002299 	.word	0x08002299
 8002200:	0800229f 	.word	0x0800229f
 8002204:	0800229f 	.word	0x0800229f
 8002208:	0800229f 	.word	0x0800229f
 800220c:	0800229f 	.word	0x0800229f
 8002210:	0800229f 	.word	0x0800229f
 8002214:	0800229f 	.word	0x0800229f
 8002218:	0800229f 	.word	0x0800229f
 800221c:	0800229f 	.word	0x0800229f
 8002220:	0800229f 	.word	0x0800229f
 8002224:	0800229f 	.word	0x0800229f
 8002228:	0800229f 	.word	0x0800229f
 800222c:	0800229f 	.word	0x0800229f
 8002230:	0800229f 	.word	0x0800229f
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002261 	.word	0x08002261
 800223c:	4a79      	ldr	r2, [pc, #484]	@ (8002424 <HAL_GPIO_Init+0x2b4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002242:	e02c      	b.n	800229e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	623b      	str	r3, [r7, #32]
          break;
 800224a:	e029      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	3304      	adds	r3, #4
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e024      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	3308      	adds	r3, #8
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e01f      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	330c      	adds	r3, #12
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e01a      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002272:	2304      	movs	r3, #4
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e013      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002280:	2308      	movs	r3, #8
 8002282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	611a      	str	r2, [r3, #16]
          break;
 800228a:	e009      	b.n	80022a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	615a      	str	r2, [r3, #20]
          break;
 8002296:	e003      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          break;
 800229e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2bff      	cmp	r3, #255	@ 0xff
 80022a4:	d801      	bhi.n	80022aa <HAL_GPIO_Init+0x13a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_Init+0x13e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2bff      	cmp	r3, #255	@ 0xff
 80022b4:	d802      	bhi.n	80022bc <HAL_GPIO_Init+0x14c>
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_Init+0x152>
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	3b08      	subs	r3, #8
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	210f      	movs	r1, #15
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	431a      	orrs	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80b1 	beq.w	8002452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002428 <HAL_GPIO_Init+0x2b8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002428 <HAL_GPIO_Init+0x2b8>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <HAL_GPIO_Init+0x2b8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002308:	4a48      	ldr	r2, [pc, #288]	@ (800242c <HAL_GPIO_Init+0x2bc>)
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a40      	ldr	r2, [pc, #256]	@ (8002430 <HAL_GPIO_Init+0x2c0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_Init+0x1ec>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3f      	ldr	r2, [pc, #252]	@ (8002434 <HAL_GPIO_Init+0x2c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x1e8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3e      	ldr	r2, [pc, #248]	@ (8002438 <HAL_GPIO_Init+0x2c8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x1e4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3d      	ldr	r2, [pc, #244]	@ (800243c <HAL_GPIO_Init+0x2cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_Init+0x1e0>
 800234c:	2303      	movs	r3, #3
 800234e:	e006      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002350:	2304      	movs	r3, #4
 8002352:	e004      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002354:	2302      	movs	r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 800235c:	2300      	movs	r3, #0
 800235e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800236e:	492f      	ldr	r1, [pc, #188]	@ (800242c <HAL_GPIO_Init+0x2bc>)
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	492c      	ldr	r1, [pc, #176]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	4928      	ldr	r1, [pc, #160]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4922      	ldr	r1, [pc, #136]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	491e      	ldr	r1, [pc, #120]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4918      	ldr	r1, [pc, #96]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4914      	ldr	r1, [pc, #80]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d021      	beq.n	8002444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	490e      	ldr	r1, [pc, #56]	@ (8002440 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e021      	b.n	8002452 <HAL_GPIO_Init+0x2e2>
 800240e:	bf00      	nop
 8002410:	10320000 	.word	0x10320000
 8002414:	10310000 	.word	0x10310000
 8002418:	10220000 	.word	0x10220000
 800241c:	10210000 	.word	0x10210000
 8002420:	10120000 	.word	0x10120000
 8002424:	10110000 	.word	0x10110000
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	40010800 	.word	0x40010800
 8002434:	40010c00 	.word	0x40010c00
 8002438:	40011000 	.word	0x40011000
 800243c:	40011400 	.word	0x40011400
 8002440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_GPIO_Init+0x304>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	43db      	mvns	r3, r3
 800244c:	4909      	ldr	r1, [pc, #36]	@ (8002474 <HAL_GPIO_Init+0x304>)
 800244e:	4013      	ands	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f47f ae8e 	bne.w	8002184 <HAL_GPIO_Init+0x14>
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	372c      	adds	r7, #44	@ 0x2c
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e001      	b.n	800249a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
 80024b2:	4613      	mov	r3, r2
 80024b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b6:	787b      	ldrb	r3, [r7, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c2:	e003      	b.n	80024cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	041a      	lsls	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	041a      	lsls	r2, r3, #16
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	400b      	ands	r3, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e272      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8087 	beq.w	8002636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002528:	4b92      	ldr	r3, [pc, #584]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00c      	beq.n	800254e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002534:	4b8f      	ldr	r3, [pc, #572]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d112      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
 8002540:	4b8c      	ldr	r3, [pc, #560]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254c:	d10b      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	4b89      	ldr	r3, [pc, #548]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06c      	beq.n	8002634 <HAL_RCC_OscConfig+0x12c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d168      	bne.n	8002634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e24c      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x76>
 8002570:	4b80      	ldr	r3, [pc, #512]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7f      	ldr	r2, [pc, #508]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e02e      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b7b      	ldr	r3, [pc, #492]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7a      	ldr	r2, [pc, #488]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b78      	ldr	r3, [pc, #480]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a77      	ldr	r2, [pc, #476]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0xbc>
 80025aa:	4b72      	ldr	r3, [pc, #456]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a71      	ldr	r2, [pc, #452]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b68      	ldr	r3, [pc, #416]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a67      	ldr	r2, [pc, #412]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fe02 	bl	80011ec <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fdfe 	bl	80011ec <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e200      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xe4>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fdee 	bl	80011ec <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fdea 	bl	80011ec <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1ec      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x10c>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800264e:	4b49      	ldr	r3, [pc, #292]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
 800265a:	4b46      	ldr	r3, [pc, #280]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c0      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3d      	ldr	r3, [pc, #244]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4939      	ldr	r1, [pc, #228]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b36      	ldr	r3, [pc, #216]	@ (8002778 <HAL_RCC_OscConfig+0x270>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fda3 	bl	80011ec <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fd9f 	bl	80011ec <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a1      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4927      	ldr	r1, [pc, #156]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_RCC_OscConfig+0x270>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fd82 	bl	80011ec <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe fd7e 	bl	80011ec <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e180      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03a      	beq.n	800278c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_RCC_OscConfig+0x274>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7fe fd62 	bl	80011ec <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fd5e 	bl	80011ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e160      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f000 face 	bl	8002cec <RCC_Delay>
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_RCC_OscConfig+0x274>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe fd48 	bl	80011ec <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fd44 	bl	80011ec <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d908      	bls.n	8002780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e146      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	42420000 	.word	0x42420000
 800277c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b92      	ldr	r3, [pc, #584]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e9      	bne.n	8002760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a6 	beq.w	80028e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b8b      	ldr	r3, [pc, #556]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a87      	ldr	r2, [pc, #540]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b85      	ldr	r3, [pc, #532]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b82      	ldr	r3, [pc, #520]	@ (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b7f      	ldr	r3, [pc, #508]	@ (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7e      	ldr	r2, [pc, #504]	@ (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7fe fd05 	bl	80011ec <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe fd01 	bl	80011ec <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	@ 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e103      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b75      	ldr	r3, [pc, #468]	@ (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x312>
 800280c:	4b6f      	ldr	r3, [pc, #444]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a6e      	ldr	r2, [pc, #440]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e02d      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x334>
 8002822:	4b6a      	ldr	r3, [pc, #424]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a69      	ldr	r2, [pc, #420]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	4b67      	ldr	r3, [pc, #412]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a66      	ldr	r2, [pc, #408]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	e01c      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x356>
 8002844:	4b61      	ldr	r3, [pc, #388]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a60      	ldr	r2, [pc, #384]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	4b5e      	ldr	r3, [pc, #376]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a5d      	ldr	r2, [pc, #372]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800285e:	4b5b      	ldr	r3, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a5a      	ldr	r2, [pc, #360]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b58      	ldr	r3, [pc, #352]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fcb5 	bl	80011ec <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fcb1 	bl	80011ec <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0b1      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b4b      	ldr	r3, [pc, #300]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCC_OscConfig+0x37e>
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fc9f 	bl	80011ec <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fc9b 	bl	80011ec <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e09b      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	4b40      	ldr	r3, [pc, #256]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b3c      	ldr	r3, [pc, #240]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a3b      	ldr	r2, [pc, #236]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8087 	beq.w	80029fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d061      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d146      	bne.n	8002992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b33      	ldr	r3, [pc, #204]	@ (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe fc6f 	bl	80011ec <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fc6b 	bl	80011ec <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e06d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002938:	d108      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4921      	ldr	r1, [pc, #132]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294c:	4b1f      	ldr	r3, [pc, #124]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a19      	ldr	r1, [r3, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	430b      	orrs	r3, r1
 800295e:	491b      	ldr	r1, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fc3f 	bl	80011ec <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fc3b 	bl	80011ec <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x46a>
 8002990:	e035      	b.n	80029fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fc28 	bl	80011ec <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fc24 	bl	80011ec <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e026      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x498>
 80029be:	e01e      	b.n	80029fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e019      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_OscConfig+0x500>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b6a      	ldr	r3, [pc, #424]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d910      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b67      	ldr	r3, [pc, #412]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4965      	ldr	r1, [pc, #404]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a52      	ldr	r2, [pc, #328]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d040      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d115      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b41      	ldr	r3, [pc, #260]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e073      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4936      	ldr	r1, [pc, #216]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fb76 	bl	80011ec <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe fb72 	bl	80011ec <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e053      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b27      	ldr	r3, [pc, #156]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d210      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4922      	ldr	r1, [pc, #136]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f821 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1d0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fad4 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08003b60 	.word	0x08003b60
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x30>
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0e:	e027      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c10:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c12:	613b      	str	r3, [r7, #16]
      break;
 8002c14:	e027      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0c9b      	lsrs	r3, r3, #18
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	0c5b      	lsrs	r3, r3, #17
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	4a11      	ldr	r2, [pc, #68]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	fb03 f202 	mul.w	r2, r3, r2
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e004      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c62:	613b      	str	r3, [r7, #16]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	693b      	ldr	r3, [r7, #16]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	08003b78 	.word	0x08003b78
 8002c80:	08003b88 	.word	0x08003b88
 8002c84:	003d0900 	.word	0x003d0900

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	@ (8002c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000008 	.word	0x20000008

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca0:	f7ff fff2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08003b70 	.word	0x08003b70

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0adb      	lsrs	r3, r3, #11
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4903      	ldr	r1, [pc, #12]	@ (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08003b70 	.word	0x08003b70

08002cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <RCC_Delay+0x34>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <RCC_Delay+0x38>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a5b      	lsrs	r3, r3, #9
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d08:	bf00      	nop
  }
  while (Delay --);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <RCC_Delay+0x1c>
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	20000008 	.word	0x20000008
 8002d24:	10624dd3 	.word	0x10624dd3

08002d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e042      	b.n	8002dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe f906 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f971 	bl	8003054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d175      	bne.n	8002ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Transmit+0x2c>
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e06e      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2221      	movs	r2, #33	@ 0x21
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fe f9f1 	bl	80011ec <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	d108      	bne.n	8002e34 <HAL_UART_Transmit+0x6c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e003      	b.n	8002e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e3c:	e02e      	b.n	8002e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	@ 0x80
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f848 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e03a      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1cb      	bne.n	8002e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2140      	movs	r1, #64	@ 0x40
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f814 	bl	8002ede <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e006      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eee:	e03b      	b.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d037      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fe f978 	bl	80011ec <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e03a      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d023      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d020      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	d01d      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d116      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f81d 	bl	8002f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e00f      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d0b4      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b095      	sub	sp, #84	@ 0x54
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e5      	bne.n	8002f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	d119      	bne.n	800303c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	60bb      	str	r3, [r7, #8]
   return(result);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0310 	bic.w	r3, r3, #16
 800301e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003028:	61ba      	str	r2, [r7, #24]
 800302a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6979      	ldr	r1, [r7, #20]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800304a:	bf00      	nop
 800304c:	3754      	adds	r7, #84	@ 0x54
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800308e:	f023 030c 	bic.w	r3, r3, #12
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	430b      	orrs	r3, r1
 800309a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003168 <UART_SetConfig+0x114>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7ff fe02 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	e002      	b.n	80030ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030c4:	f7ff fdea 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 80030c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009a      	lsls	r2, r3, #2
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	4a22      	ldr	r2, [pc, #136]	@ (800316c <UART_SetConfig+0x118>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	0119      	lsls	r1, r3, #4
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <UART_SetConfig+0x118>)
 8003102:	fba3 0302 	umull	r0, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2064      	movs	r0, #100	@ 0x64
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	3332      	adds	r3, #50	@ 0x32
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <UART_SetConfig+0x118>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003120:	4419      	add	r1, r3
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009a      	lsls	r2, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fbb2 f2f3 	udiv	r2, r2, r3
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <UART_SetConfig+0x118>)
 800313a:	fba3 0302 	umull	r0, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2064      	movs	r0, #100	@ 0x64
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	3332      	adds	r3, #50	@ 0x32
 800314c:	4a07      	ldr	r2, [pc, #28]	@ (800316c <UART_SetConfig+0x118>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	440a      	add	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40013800 	.word	0x40013800
 800316c:	51eb851f 	.word	0x51eb851f

08003170 <siprintf>:
 8003170:	b40e      	push	{r1, r2, r3}
 8003172:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003176:	b500      	push	{lr}
 8003178:	b09c      	sub	sp, #112	@ 0x70
 800317a:	ab1d      	add	r3, sp, #116	@ 0x74
 800317c:	9002      	str	r0, [sp, #8]
 800317e:	9006      	str	r0, [sp, #24]
 8003180:	9107      	str	r1, [sp, #28]
 8003182:	9104      	str	r1, [sp, #16]
 8003184:	4808      	ldr	r0, [pc, #32]	@ (80031a8 <siprintf+0x38>)
 8003186:	4909      	ldr	r1, [pc, #36]	@ (80031ac <siprintf+0x3c>)
 8003188:	f853 2b04 	ldr.w	r2, [r3], #4
 800318c:	9105      	str	r1, [sp, #20]
 800318e:	6800      	ldr	r0, [r0, #0]
 8003190:	a902      	add	r1, sp, #8
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	f000 f992 	bl	80034bc <_svfiprintf_r>
 8003198:	2200      	movs	r2, #0
 800319a:	9b02      	ldr	r3, [sp, #8]
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	b01c      	add	sp, #112	@ 0x70
 80031a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a4:	b003      	add	sp, #12
 80031a6:	4770      	bx	lr
 80031a8:	20000014 	.word	0x20000014
 80031ac:	ffff0208 	.word	0xffff0208

080031b0 <memset>:
 80031b0:	4603      	mov	r3, r0
 80031b2:	4402      	add	r2, r0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d100      	bne.n	80031ba <memset+0xa>
 80031b8:	4770      	bx	lr
 80031ba:	f803 1b01 	strb.w	r1, [r3], #1
 80031be:	e7f9      	b.n	80031b4 <memset+0x4>

080031c0 <__errno>:
 80031c0:	4b01      	ldr	r3, [pc, #4]	@ (80031c8 <__errno+0x8>)
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000014 	.word	0x20000014

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	2600      	movs	r6, #0
 80031d0:	4d0c      	ldr	r5, [pc, #48]	@ (8003204 <__libc_init_array+0x38>)
 80031d2:	4c0d      	ldr	r4, [pc, #52]	@ (8003208 <__libc_init_array+0x3c>)
 80031d4:	1b64      	subs	r4, r4, r5
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	42a6      	cmp	r6, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	f000 fc78 	bl	8003ad0 <_init>
 80031e0:	2600      	movs	r6, #0
 80031e2:	4d0a      	ldr	r5, [pc, #40]	@ (800320c <__libc_init_array+0x40>)
 80031e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003210 <__libc_init_array+0x44>)
 80031e6:	1b64      	subs	r4, r4, r5
 80031e8:	10a4      	asrs	r4, r4, #2
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f4:	4798      	blx	r3
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fe:	4798      	blx	r3
 8003200:	3601      	adds	r6, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	08003bc8 	.word	0x08003bc8
 8003208:	08003bc8 	.word	0x08003bc8
 800320c:	08003bc8 	.word	0x08003bc8
 8003210:	08003bcc 	.word	0x08003bcc

08003214 <__retarget_lock_acquire_recursive>:
 8003214:	4770      	bx	lr

08003216 <__retarget_lock_release_recursive>:
 8003216:	4770      	bx	lr

08003218 <_free_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	2900      	cmp	r1, #0
 800321e:	d040      	beq.n	80032a2 <_free_r+0x8a>
 8003220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003224:	1f0c      	subs	r4, r1, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfb8      	it	lt
 800322a:	18e4      	addlt	r4, r4, r3
 800322c:	f000 f8de 	bl	80033ec <__malloc_lock>
 8003230:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <_free_r+0x8c>)
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	b933      	cbnz	r3, 8003244 <_free_r+0x2c>
 8003236:	6063      	str	r3, [r4, #4]
 8003238:	6014      	str	r4, [r2, #0]
 800323a:	4628      	mov	r0, r5
 800323c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003240:	f000 b8da 	b.w	80033f8 <__malloc_unlock>
 8003244:	42a3      	cmp	r3, r4
 8003246:	d908      	bls.n	800325a <_free_r+0x42>
 8003248:	6820      	ldr	r0, [r4, #0]
 800324a:	1821      	adds	r1, r4, r0
 800324c:	428b      	cmp	r3, r1
 800324e:	bf01      	itttt	eq
 8003250:	6819      	ldreq	r1, [r3, #0]
 8003252:	685b      	ldreq	r3, [r3, #4]
 8003254:	1809      	addeq	r1, r1, r0
 8003256:	6021      	streq	r1, [r4, #0]
 8003258:	e7ed      	b.n	8003236 <_free_r+0x1e>
 800325a:	461a      	mov	r2, r3
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	b10b      	cbz	r3, 8003264 <_free_r+0x4c>
 8003260:	42a3      	cmp	r3, r4
 8003262:	d9fa      	bls.n	800325a <_free_r+0x42>
 8003264:	6811      	ldr	r1, [r2, #0]
 8003266:	1850      	adds	r0, r2, r1
 8003268:	42a0      	cmp	r0, r4
 800326a:	d10b      	bne.n	8003284 <_free_r+0x6c>
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	4401      	add	r1, r0
 8003270:	1850      	adds	r0, r2, r1
 8003272:	4283      	cmp	r3, r0
 8003274:	6011      	str	r1, [r2, #0]
 8003276:	d1e0      	bne.n	800323a <_free_r+0x22>
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4408      	add	r0, r1
 800327e:	6010      	str	r0, [r2, #0]
 8003280:	6053      	str	r3, [r2, #4]
 8003282:	e7da      	b.n	800323a <_free_r+0x22>
 8003284:	d902      	bls.n	800328c <_free_r+0x74>
 8003286:	230c      	movs	r3, #12
 8003288:	602b      	str	r3, [r5, #0]
 800328a:	e7d6      	b.n	800323a <_free_r+0x22>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	1821      	adds	r1, r4, r0
 8003290:	428b      	cmp	r3, r1
 8003292:	bf01      	itttt	eq
 8003294:	6819      	ldreq	r1, [r3, #0]
 8003296:	685b      	ldreq	r3, [r3, #4]
 8003298:	1809      	addeq	r1, r1, r0
 800329a:	6021      	streq	r1, [r4, #0]
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	6054      	str	r4, [r2, #4]
 80032a0:	e7cb      	b.n	800323a <_free_r+0x22>
 80032a2:	bd38      	pop	{r3, r4, r5, pc}
 80032a4:	20000308 	.word	0x20000308

080032a8 <sbrk_aligned>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	4e0f      	ldr	r6, [pc, #60]	@ (80032e8 <sbrk_aligned+0x40>)
 80032ac:	460c      	mov	r4, r1
 80032ae:	6831      	ldr	r1, [r6, #0]
 80032b0:	4605      	mov	r5, r0
 80032b2:	b911      	cbnz	r1, 80032ba <sbrk_aligned+0x12>
 80032b4:	f000 fbaa 	bl	8003a0c <_sbrk_r>
 80032b8:	6030      	str	r0, [r6, #0]
 80032ba:	4621      	mov	r1, r4
 80032bc:	4628      	mov	r0, r5
 80032be:	f000 fba5 	bl	8003a0c <_sbrk_r>
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	d103      	bne.n	80032ce <sbrk_aligned+0x26>
 80032c6:	f04f 34ff 	mov.w	r4, #4294967295
 80032ca:	4620      	mov	r0, r4
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	1cc4      	adds	r4, r0, #3
 80032d0:	f024 0403 	bic.w	r4, r4, #3
 80032d4:	42a0      	cmp	r0, r4
 80032d6:	d0f8      	beq.n	80032ca <sbrk_aligned+0x22>
 80032d8:	1a21      	subs	r1, r4, r0
 80032da:	4628      	mov	r0, r5
 80032dc:	f000 fb96 	bl	8003a0c <_sbrk_r>
 80032e0:	3001      	adds	r0, #1
 80032e2:	d1f2      	bne.n	80032ca <sbrk_aligned+0x22>
 80032e4:	e7ef      	b.n	80032c6 <sbrk_aligned+0x1e>
 80032e6:	bf00      	nop
 80032e8:	20000304 	.word	0x20000304

080032ec <_malloc_r>:
 80032ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032f0:	1ccd      	adds	r5, r1, #3
 80032f2:	f025 0503 	bic.w	r5, r5, #3
 80032f6:	3508      	adds	r5, #8
 80032f8:	2d0c      	cmp	r5, #12
 80032fa:	bf38      	it	cc
 80032fc:	250c      	movcc	r5, #12
 80032fe:	2d00      	cmp	r5, #0
 8003300:	4606      	mov	r6, r0
 8003302:	db01      	blt.n	8003308 <_malloc_r+0x1c>
 8003304:	42a9      	cmp	r1, r5
 8003306:	d904      	bls.n	8003312 <_malloc_r+0x26>
 8003308:	230c      	movs	r3, #12
 800330a:	6033      	str	r3, [r6, #0]
 800330c:	2000      	movs	r0, #0
 800330e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033e8 <_malloc_r+0xfc>
 8003316:	f000 f869 	bl	80033ec <__malloc_lock>
 800331a:	f8d8 3000 	ldr.w	r3, [r8]
 800331e:	461c      	mov	r4, r3
 8003320:	bb44      	cbnz	r4, 8003374 <_malloc_r+0x88>
 8003322:	4629      	mov	r1, r5
 8003324:	4630      	mov	r0, r6
 8003326:	f7ff ffbf 	bl	80032a8 <sbrk_aligned>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	4604      	mov	r4, r0
 800332e:	d158      	bne.n	80033e2 <_malloc_r+0xf6>
 8003330:	f8d8 4000 	ldr.w	r4, [r8]
 8003334:	4627      	mov	r7, r4
 8003336:	2f00      	cmp	r7, #0
 8003338:	d143      	bne.n	80033c2 <_malloc_r+0xd6>
 800333a:	2c00      	cmp	r4, #0
 800333c:	d04b      	beq.n	80033d6 <_malloc_r+0xea>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	4639      	mov	r1, r7
 8003342:	4630      	mov	r0, r6
 8003344:	eb04 0903 	add.w	r9, r4, r3
 8003348:	f000 fb60 	bl	8003a0c <_sbrk_r>
 800334c:	4581      	cmp	r9, r0
 800334e:	d142      	bne.n	80033d6 <_malloc_r+0xea>
 8003350:	6821      	ldr	r1, [r4, #0]
 8003352:	4630      	mov	r0, r6
 8003354:	1a6d      	subs	r5, r5, r1
 8003356:	4629      	mov	r1, r5
 8003358:	f7ff ffa6 	bl	80032a8 <sbrk_aligned>
 800335c:	3001      	adds	r0, #1
 800335e:	d03a      	beq.n	80033d6 <_malloc_r+0xea>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	442b      	add	r3, r5
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	f8d8 3000 	ldr.w	r3, [r8]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	bb62      	cbnz	r2, 80033c8 <_malloc_r+0xdc>
 800336e:	f8c8 7000 	str.w	r7, [r8]
 8003372:	e00f      	b.n	8003394 <_malloc_r+0xa8>
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	1b52      	subs	r2, r2, r5
 8003378:	d420      	bmi.n	80033bc <_malloc_r+0xd0>
 800337a:	2a0b      	cmp	r2, #11
 800337c:	d917      	bls.n	80033ae <_malloc_r+0xc2>
 800337e:	1961      	adds	r1, r4, r5
 8003380:	42a3      	cmp	r3, r4
 8003382:	6025      	str	r5, [r4, #0]
 8003384:	bf18      	it	ne
 8003386:	6059      	strne	r1, [r3, #4]
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	bf08      	it	eq
 800338c:	f8c8 1000 	streq.w	r1, [r8]
 8003390:	5162      	str	r2, [r4, r5]
 8003392:	604b      	str	r3, [r1, #4]
 8003394:	4630      	mov	r0, r6
 8003396:	f000 f82f 	bl	80033f8 <__malloc_unlock>
 800339a:	f104 000b 	add.w	r0, r4, #11
 800339e:	1d23      	adds	r3, r4, #4
 80033a0:	f020 0007 	bic.w	r0, r0, #7
 80033a4:	1ac2      	subs	r2, r0, r3
 80033a6:	bf1c      	itt	ne
 80033a8:	1a1b      	subne	r3, r3, r0
 80033aa:	50a3      	strne	r3, [r4, r2]
 80033ac:	e7af      	b.n	800330e <_malloc_r+0x22>
 80033ae:	6862      	ldr	r2, [r4, #4]
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	bf0c      	ite	eq
 80033b4:	f8c8 2000 	streq.w	r2, [r8]
 80033b8:	605a      	strne	r2, [r3, #4]
 80033ba:	e7eb      	b.n	8003394 <_malloc_r+0xa8>
 80033bc:	4623      	mov	r3, r4
 80033be:	6864      	ldr	r4, [r4, #4]
 80033c0:	e7ae      	b.n	8003320 <_malloc_r+0x34>
 80033c2:	463c      	mov	r4, r7
 80033c4:	687f      	ldr	r7, [r7, #4]
 80033c6:	e7b6      	b.n	8003336 <_malloc_r+0x4a>
 80033c8:	461a      	mov	r2, r3
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	42a3      	cmp	r3, r4
 80033ce:	d1fb      	bne.n	80033c8 <_malloc_r+0xdc>
 80033d0:	2300      	movs	r3, #0
 80033d2:	6053      	str	r3, [r2, #4]
 80033d4:	e7de      	b.n	8003394 <_malloc_r+0xa8>
 80033d6:	230c      	movs	r3, #12
 80033d8:	4630      	mov	r0, r6
 80033da:	6033      	str	r3, [r6, #0]
 80033dc:	f000 f80c 	bl	80033f8 <__malloc_unlock>
 80033e0:	e794      	b.n	800330c <_malloc_r+0x20>
 80033e2:	6005      	str	r5, [r0, #0]
 80033e4:	e7d6      	b.n	8003394 <_malloc_r+0xa8>
 80033e6:	bf00      	nop
 80033e8:	20000308 	.word	0x20000308

080033ec <__malloc_lock>:
 80033ec:	4801      	ldr	r0, [pc, #4]	@ (80033f4 <__malloc_lock+0x8>)
 80033ee:	f7ff bf11 	b.w	8003214 <__retarget_lock_acquire_recursive>
 80033f2:	bf00      	nop
 80033f4:	20000300 	.word	0x20000300

080033f8 <__malloc_unlock>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__malloc_unlock+0x8>)
 80033fa:	f7ff bf0c 	b.w	8003216 <__retarget_lock_release_recursive>
 80033fe:	bf00      	nop
 8003400:	20000300 	.word	0x20000300

08003404 <__ssputs_r>:
 8003404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003408:	461f      	mov	r7, r3
 800340a:	688e      	ldr	r6, [r1, #8]
 800340c:	4682      	mov	sl, r0
 800340e:	42be      	cmp	r6, r7
 8003410:	460c      	mov	r4, r1
 8003412:	4690      	mov	r8, r2
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	d82d      	bhi.n	8003474 <__ssputs_r+0x70>
 8003418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800341c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003420:	d026      	beq.n	8003470 <__ssputs_r+0x6c>
 8003422:	6965      	ldr	r5, [r4, #20]
 8003424:	6909      	ldr	r1, [r1, #16]
 8003426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800342a:	eba3 0901 	sub.w	r9, r3, r1
 800342e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003432:	1c7b      	adds	r3, r7, #1
 8003434:	444b      	add	r3, r9
 8003436:	106d      	asrs	r5, r5, #1
 8003438:	429d      	cmp	r5, r3
 800343a:	bf38      	it	cc
 800343c:	461d      	movcc	r5, r3
 800343e:	0553      	lsls	r3, r2, #21
 8003440:	d527      	bpl.n	8003492 <__ssputs_r+0x8e>
 8003442:	4629      	mov	r1, r5
 8003444:	f7ff ff52 	bl	80032ec <_malloc_r>
 8003448:	4606      	mov	r6, r0
 800344a:	b360      	cbz	r0, 80034a6 <__ssputs_r+0xa2>
 800344c:	464a      	mov	r2, r9
 800344e:	6921      	ldr	r1, [r4, #16]
 8003450:	f000 fafa 	bl	8003a48 <memcpy>
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800345a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	6126      	str	r6, [r4, #16]
 8003462:	444e      	add	r6, r9
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	463e      	mov	r6, r7
 8003468:	6165      	str	r5, [r4, #20]
 800346a:	eba5 0509 	sub.w	r5, r5, r9
 800346e:	60a5      	str	r5, [r4, #8]
 8003470:	42be      	cmp	r6, r7
 8003472:	d900      	bls.n	8003476 <__ssputs_r+0x72>
 8003474:	463e      	mov	r6, r7
 8003476:	4632      	mov	r2, r6
 8003478:	4641      	mov	r1, r8
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	f000 faac 	bl	80039d8 <memmove>
 8003480:	2000      	movs	r0, #0
 8003482:	68a3      	ldr	r3, [r4, #8]
 8003484:	1b9b      	subs	r3, r3, r6
 8003486:	60a3      	str	r3, [r4, #8]
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	4433      	add	r3, r6
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003492:	462a      	mov	r2, r5
 8003494:	f000 fae6 	bl	8003a64 <_realloc_r>
 8003498:	4606      	mov	r6, r0
 800349a:	2800      	cmp	r0, #0
 800349c:	d1e0      	bne.n	8003460 <__ssputs_r+0x5c>
 800349e:	4650      	mov	r0, sl
 80034a0:	6921      	ldr	r1, [r4, #16]
 80034a2:	f7ff feb9 	bl	8003218 <_free_r>
 80034a6:	230c      	movs	r3, #12
 80034a8:	f8ca 3000 	str.w	r3, [sl]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f04f 30ff 	mov.w	r0, #4294967295
 80034b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	e7e9      	b.n	800348e <__ssputs_r+0x8a>
	...

080034bc <_svfiprintf_r>:
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	4698      	mov	r8, r3
 80034c2:	898b      	ldrh	r3, [r1, #12]
 80034c4:	4607      	mov	r7, r0
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	460d      	mov	r5, r1
 80034ca:	4614      	mov	r4, r2
 80034cc:	b09d      	sub	sp, #116	@ 0x74
 80034ce:	d510      	bpl.n	80034f2 <_svfiprintf_r+0x36>
 80034d0:	690b      	ldr	r3, [r1, #16]
 80034d2:	b973      	cbnz	r3, 80034f2 <_svfiprintf_r+0x36>
 80034d4:	2140      	movs	r1, #64	@ 0x40
 80034d6:	f7ff ff09 	bl	80032ec <_malloc_r>
 80034da:	6028      	str	r0, [r5, #0]
 80034dc:	6128      	str	r0, [r5, #16]
 80034de:	b930      	cbnz	r0, 80034ee <_svfiprintf_r+0x32>
 80034e0:	230c      	movs	r3, #12
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	b01d      	add	sp, #116	@ 0x74
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	2340      	movs	r3, #64	@ 0x40
 80034f0:	616b      	str	r3, [r5, #20]
 80034f2:	2300      	movs	r3, #0
 80034f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80034f6:	2320      	movs	r3, #32
 80034f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034fc:	2330      	movs	r3, #48	@ 0x30
 80034fe:	f04f 0901 	mov.w	r9, #1
 8003502:	f8cd 800c 	str.w	r8, [sp, #12]
 8003506:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80036a0 <_svfiprintf_r+0x1e4>
 800350a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800350e:	4623      	mov	r3, r4
 8003510:	469a      	mov	sl, r3
 8003512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003516:	b10a      	cbz	r2, 800351c <_svfiprintf_r+0x60>
 8003518:	2a25      	cmp	r2, #37	@ 0x25
 800351a:	d1f9      	bne.n	8003510 <_svfiprintf_r+0x54>
 800351c:	ebba 0b04 	subs.w	fp, sl, r4
 8003520:	d00b      	beq.n	800353a <_svfiprintf_r+0x7e>
 8003522:	465b      	mov	r3, fp
 8003524:	4622      	mov	r2, r4
 8003526:	4629      	mov	r1, r5
 8003528:	4638      	mov	r0, r7
 800352a:	f7ff ff6b 	bl	8003404 <__ssputs_r>
 800352e:	3001      	adds	r0, #1
 8003530:	f000 80a7 	beq.w	8003682 <_svfiprintf_r+0x1c6>
 8003534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003536:	445a      	add	r2, fp
 8003538:	9209      	str	r2, [sp, #36]	@ 0x24
 800353a:	f89a 3000 	ldrb.w	r3, [sl]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 809f 	beq.w	8003682 <_svfiprintf_r+0x1c6>
 8003544:	2300      	movs	r3, #0
 8003546:	f04f 32ff 	mov.w	r2, #4294967295
 800354a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800354e:	f10a 0a01 	add.w	sl, sl, #1
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	9307      	str	r3, [sp, #28]
 8003556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800355a:	931a      	str	r3, [sp, #104]	@ 0x68
 800355c:	4654      	mov	r4, sl
 800355e:	2205      	movs	r2, #5
 8003560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003564:	484e      	ldr	r0, [pc, #312]	@ (80036a0 <_svfiprintf_r+0x1e4>)
 8003566:	f000 fa61 	bl	8003a2c <memchr>
 800356a:	9a04      	ldr	r2, [sp, #16]
 800356c:	b9d8      	cbnz	r0, 80035a6 <_svfiprintf_r+0xea>
 800356e:	06d0      	lsls	r0, r2, #27
 8003570:	bf44      	itt	mi
 8003572:	2320      	movmi	r3, #32
 8003574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003578:	0711      	lsls	r1, r2, #28
 800357a:	bf44      	itt	mi
 800357c:	232b      	movmi	r3, #43	@ 0x2b
 800357e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003582:	f89a 3000 	ldrb.w	r3, [sl]
 8003586:	2b2a      	cmp	r3, #42	@ 0x2a
 8003588:	d015      	beq.n	80035b6 <_svfiprintf_r+0xfa>
 800358a:	4654      	mov	r4, sl
 800358c:	2000      	movs	r0, #0
 800358e:	f04f 0c0a 	mov.w	ip, #10
 8003592:	9a07      	ldr	r2, [sp, #28]
 8003594:	4621      	mov	r1, r4
 8003596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800359a:	3b30      	subs	r3, #48	@ 0x30
 800359c:	2b09      	cmp	r3, #9
 800359e:	d94b      	bls.n	8003638 <_svfiprintf_r+0x17c>
 80035a0:	b1b0      	cbz	r0, 80035d0 <_svfiprintf_r+0x114>
 80035a2:	9207      	str	r2, [sp, #28]
 80035a4:	e014      	b.n	80035d0 <_svfiprintf_r+0x114>
 80035a6:	eba0 0308 	sub.w	r3, r0, r8
 80035aa:	fa09 f303 	lsl.w	r3, r9, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	46a2      	mov	sl, r4
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	e7d2      	b.n	800355c <_svfiprintf_r+0xa0>
 80035b6:	9b03      	ldr	r3, [sp, #12]
 80035b8:	1d19      	adds	r1, r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	9103      	str	r1, [sp, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bfbb      	ittet	lt
 80035c2:	425b      	neglt	r3, r3
 80035c4:	f042 0202 	orrlt.w	r2, r2, #2
 80035c8:	9307      	strge	r3, [sp, #28]
 80035ca:	9307      	strlt	r3, [sp, #28]
 80035cc:	bfb8      	it	lt
 80035ce:	9204      	strlt	r2, [sp, #16]
 80035d0:	7823      	ldrb	r3, [r4, #0]
 80035d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80035d4:	d10a      	bne.n	80035ec <_svfiprintf_r+0x130>
 80035d6:	7863      	ldrb	r3, [r4, #1]
 80035d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80035da:	d132      	bne.n	8003642 <_svfiprintf_r+0x186>
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	3402      	adds	r4, #2
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	9203      	str	r2, [sp, #12]
 80035e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035ea:	9305      	str	r3, [sp, #20]
 80035ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80036a4 <_svfiprintf_r+0x1e8>
 80035f0:	2203      	movs	r2, #3
 80035f2:	4650      	mov	r0, sl
 80035f4:	7821      	ldrb	r1, [r4, #0]
 80035f6:	f000 fa19 	bl	8003a2c <memchr>
 80035fa:	b138      	cbz	r0, 800360c <_svfiprintf_r+0x150>
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	9b04      	ldr	r3, [sp, #16]
 8003600:	eba0 000a 	sub.w	r0, r0, sl
 8003604:	4082      	lsls	r2, r0
 8003606:	4313      	orrs	r3, r2
 8003608:	3401      	adds	r4, #1
 800360a:	9304      	str	r3, [sp, #16]
 800360c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003610:	2206      	movs	r2, #6
 8003612:	4825      	ldr	r0, [pc, #148]	@ (80036a8 <_svfiprintf_r+0x1ec>)
 8003614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003618:	f000 fa08 	bl	8003a2c <memchr>
 800361c:	2800      	cmp	r0, #0
 800361e:	d036      	beq.n	800368e <_svfiprintf_r+0x1d2>
 8003620:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <_svfiprintf_r+0x1f0>)
 8003622:	bb1b      	cbnz	r3, 800366c <_svfiprintf_r+0x1b0>
 8003624:	9b03      	ldr	r3, [sp, #12]
 8003626:	3307      	adds	r3, #7
 8003628:	f023 0307 	bic.w	r3, r3, #7
 800362c:	3308      	adds	r3, #8
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003632:	4433      	add	r3, r6
 8003634:	9309      	str	r3, [sp, #36]	@ 0x24
 8003636:	e76a      	b.n	800350e <_svfiprintf_r+0x52>
 8003638:	460c      	mov	r4, r1
 800363a:	2001      	movs	r0, #1
 800363c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003640:	e7a8      	b.n	8003594 <_svfiprintf_r+0xd8>
 8003642:	2300      	movs	r3, #0
 8003644:	f04f 0c0a 	mov.w	ip, #10
 8003648:	4619      	mov	r1, r3
 800364a:	3401      	adds	r4, #1
 800364c:	9305      	str	r3, [sp, #20]
 800364e:	4620      	mov	r0, r4
 8003650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003654:	3a30      	subs	r2, #48	@ 0x30
 8003656:	2a09      	cmp	r2, #9
 8003658:	d903      	bls.n	8003662 <_svfiprintf_r+0x1a6>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0c6      	beq.n	80035ec <_svfiprintf_r+0x130>
 800365e:	9105      	str	r1, [sp, #20]
 8003660:	e7c4      	b.n	80035ec <_svfiprintf_r+0x130>
 8003662:	4604      	mov	r4, r0
 8003664:	2301      	movs	r3, #1
 8003666:	fb0c 2101 	mla	r1, ip, r1, r2
 800366a:	e7f0      	b.n	800364e <_svfiprintf_r+0x192>
 800366c:	ab03      	add	r3, sp, #12
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	462a      	mov	r2, r5
 8003672:	4638      	mov	r0, r7
 8003674:	4b0e      	ldr	r3, [pc, #56]	@ (80036b0 <_svfiprintf_r+0x1f4>)
 8003676:	a904      	add	r1, sp, #16
 8003678:	f3af 8000 	nop.w
 800367c:	1c42      	adds	r2, r0, #1
 800367e:	4606      	mov	r6, r0
 8003680:	d1d6      	bne.n	8003630 <_svfiprintf_r+0x174>
 8003682:	89ab      	ldrh	r3, [r5, #12]
 8003684:	065b      	lsls	r3, r3, #25
 8003686:	f53f af2d 	bmi.w	80034e4 <_svfiprintf_r+0x28>
 800368a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800368c:	e72c      	b.n	80034e8 <_svfiprintf_r+0x2c>
 800368e:	ab03      	add	r3, sp, #12
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	462a      	mov	r2, r5
 8003694:	4638      	mov	r0, r7
 8003696:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <_svfiprintf_r+0x1f4>)
 8003698:	a904      	add	r1, sp, #16
 800369a:	f000 f87d 	bl	8003798 <_printf_i>
 800369e:	e7ed      	b.n	800367c <_svfiprintf_r+0x1c0>
 80036a0:	08003b8a 	.word	0x08003b8a
 80036a4:	08003b90 	.word	0x08003b90
 80036a8:	08003b94 	.word	0x08003b94
 80036ac:	00000000 	.word	0x00000000
 80036b0:	08003405 	.word	0x08003405

080036b4 <_printf_common>:
 80036b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	4616      	mov	r6, r2
 80036ba:	4698      	mov	r8, r3
 80036bc:	688a      	ldr	r2, [r1, #8]
 80036be:	690b      	ldr	r3, [r1, #16]
 80036c0:	4607      	mov	r7, r0
 80036c2:	4293      	cmp	r3, r2
 80036c4:	bfb8      	it	lt
 80036c6:	4613      	movlt	r3, r2
 80036c8:	6033      	str	r3, [r6, #0]
 80036ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036ce:	460c      	mov	r4, r1
 80036d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d4:	b10a      	cbz	r2, 80036da <_printf_common+0x26>
 80036d6:	3301      	adds	r3, #1
 80036d8:	6033      	str	r3, [r6, #0]
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	0699      	lsls	r1, r3, #26
 80036de:	bf42      	ittt	mi
 80036e0:	6833      	ldrmi	r3, [r6, #0]
 80036e2:	3302      	addmi	r3, #2
 80036e4:	6033      	strmi	r3, [r6, #0]
 80036e6:	6825      	ldr	r5, [r4, #0]
 80036e8:	f015 0506 	ands.w	r5, r5, #6
 80036ec:	d106      	bne.n	80036fc <_printf_common+0x48>
 80036ee:	f104 0a19 	add.w	sl, r4, #25
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	6832      	ldr	r2, [r6, #0]
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	42ab      	cmp	r3, r5
 80036fa:	dc2b      	bgt.n	8003754 <_printf_common+0xa0>
 80036fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	3b00      	subs	r3, #0
 8003704:	bf18      	it	ne
 8003706:	2301      	movne	r3, #1
 8003708:	0692      	lsls	r2, r2, #26
 800370a:	d430      	bmi.n	800376e <_printf_common+0xba>
 800370c:	4641      	mov	r1, r8
 800370e:	4638      	mov	r0, r7
 8003710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003714:	47c8      	blx	r9
 8003716:	3001      	adds	r0, #1
 8003718:	d023      	beq.n	8003762 <_printf_common+0xae>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	6922      	ldr	r2, [r4, #16]
 800371e:	f003 0306 	and.w	r3, r3, #6
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf14      	ite	ne
 8003726:	2500      	movne	r5, #0
 8003728:	6833      	ldreq	r3, [r6, #0]
 800372a:	f04f 0600 	mov.w	r6, #0
 800372e:	bf08      	it	eq
 8003730:	68e5      	ldreq	r5, [r4, #12]
 8003732:	f104 041a 	add.w	r4, r4, #26
 8003736:	bf08      	it	eq
 8003738:	1aed      	subeq	r5, r5, r3
 800373a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800373e:	bf08      	it	eq
 8003740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003744:	4293      	cmp	r3, r2
 8003746:	bfc4      	itt	gt
 8003748:	1a9b      	subgt	r3, r3, r2
 800374a:	18ed      	addgt	r5, r5, r3
 800374c:	42b5      	cmp	r5, r6
 800374e:	d11a      	bne.n	8003786 <_printf_common+0xd2>
 8003750:	2000      	movs	r0, #0
 8003752:	e008      	b.n	8003766 <_printf_common+0xb2>
 8003754:	2301      	movs	r3, #1
 8003756:	4652      	mov	r2, sl
 8003758:	4641      	mov	r1, r8
 800375a:	4638      	mov	r0, r7
 800375c:	47c8      	blx	r9
 800375e:	3001      	adds	r0, #1
 8003760:	d103      	bne.n	800376a <_printf_common+0xb6>
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376a:	3501      	adds	r5, #1
 800376c:	e7c1      	b.n	80036f2 <_printf_common+0x3e>
 800376e:	2030      	movs	r0, #48	@ 0x30
 8003770:	18e1      	adds	r1, r4, r3
 8003772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800377c:	4422      	add	r2, r4
 800377e:	3302      	adds	r3, #2
 8003780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003784:	e7c2      	b.n	800370c <_printf_common+0x58>
 8003786:	2301      	movs	r3, #1
 8003788:	4622      	mov	r2, r4
 800378a:	4641      	mov	r1, r8
 800378c:	4638      	mov	r0, r7
 800378e:	47c8      	blx	r9
 8003790:	3001      	adds	r0, #1
 8003792:	d0e6      	beq.n	8003762 <_printf_common+0xae>
 8003794:	3601      	adds	r6, #1
 8003796:	e7d9      	b.n	800374c <_printf_common+0x98>

08003798 <_printf_i>:
 8003798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	7e0f      	ldrb	r7, [r1, #24]
 800379e:	4691      	mov	r9, r2
 80037a0:	2f78      	cmp	r7, #120	@ 0x78
 80037a2:	4680      	mov	r8, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	469a      	mov	sl, r3
 80037a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ae:	d807      	bhi.n	80037c0 <_printf_i+0x28>
 80037b0:	2f62      	cmp	r7, #98	@ 0x62
 80037b2:	d80a      	bhi.n	80037ca <_printf_i+0x32>
 80037b4:	2f00      	cmp	r7, #0
 80037b6:	f000 80d3 	beq.w	8003960 <_printf_i+0x1c8>
 80037ba:	2f58      	cmp	r7, #88	@ 0x58
 80037bc:	f000 80ba 	beq.w	8003934 <_printf_i+0x19c>
 80037c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037c8:	e03a      	b.n	8003840 <_printf_i+0xa8>
 80037ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037ce:	2b15      	cmp	r3, #21
 80037d0:	d8f6      	bhi.n	80037c0 <_printf_i+0x28>
 80037d2:	a101      	add	r1, pc, #4	@ (adr r1, 80037d8 <_printf_i+0x40>)
 80037d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d8:	08003831 	.word	0x08003831
 80037dc:	08003845 	.word	0x08003845
 80037e0:	080037c1 	.word	0x080037c1
 80037e4:	080037c1 	.word	0x080037c1
 80037e8:	080037c1 	.word	0x080037c1
 80037ec:	080037c1 	.word	0x080037c1
 80037f0:	08003845 	.word	0x08003845
 80037f4:	080037c1 	.word	0x080037c1
 80037f8:	080037c1 	.word	0x080037c1
 80037fc:	080037c1 	.word	0x080037c1
 8003800:	080037c1 	.word	0x080037c1
 8003804:	08003947 	.word	0x08003947
 8003808:	0800386f 	.word	0x0800386f
 800380c:	08003901 	.word	0x08003901
 8003810:	080037c1 	.word	0x080037c1
 8003814:	080037c1 	.word	0x080037c1
 8003818:	08003969 	.word	0x08003969
 800381c:	080037c1 	.word	0x080037c1
 8003820:	0800386f 	.word	0x0800386f
 8003824:	080037c1 	.word	0x080037c1
 8003828:	080037c1 	.word	0x080037c1
 800382c:	08003909 	.word	0x08003909
 8003830:	6833      	ldr	r3, [r6, #0]
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6032      	str	r2, [r6, #0]
 8003838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800383c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003840:	2301      	movs	r3, #1
 8003842:	e09e      	b.n	8003982 <_printf_i+0x1ea>
 8003844:	6833      	ldr	r3, [r6, #0]
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	6031      	str	r1, [r6, #0]
 800384c:	0606      	lsls	r6, r0, #24
 800384e:	d501      	bpl.n	8003854 <_printf_i+0xbc>
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	e003      	b.n	800385c <_printf_i+0xc4>
 8003854:	0645      	lsls	r5, r0, #25
 8003856:	d5fb      	bpl.n	8003850 <_printf_i+0xb8>
 8003858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800385c:	2d00      	cmp	r5, #0
 800385e:	da03      	bge.n	8003868 <_printf_i+0xd0>
 8003860:	232d      	movs	r3, #45	@ 0x2d
 8003862:	426d      	negs	r5, r5
 8003864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003868:	230a      	movs	r3, #10
 800386a:	4859      	ldr	r0, [pc, #356]	@ (80039d0 <_printf_i+0x238>)
 800386c:	e011      	b.n	8003892 <_printf_i+0xfa>
 800386e:	6821      	ldr	r1, [r4, #0]
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	0608      	lsls	r0, r1, #24
 8003874:	f853 5b04 	ldr.w	r5, [r3], #4
 8003878:	d402      	bmi.n	8003880 <_printf_i+0xe8>
 800387a:	0649      	lsls	r1, r1, #25
 800387c:	bf48      	it	mi
 800387e:	b2ad      	uxthmi	r5, r5
 8003880:	2f6f      	cmp	r7, #111	@ 0x6f
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	bf14      	ite	ne
 8003886:	230a      	movne	r3, #10
 8003888:	2308      	moveq	r3, #8
 800388a:	4851      	ldr	r0, [pc, #324]	@ (80039d0 <_printf_i+0x238>)
 800388c:	2100      	movs	r1, #0
 800388e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003892:	6866      	ldr	r6, [r4, #4]
 8003894:	2e00      	cmp	r6, #0
 8003896:	bfa8      	it	ge
 8003898:	6821      	ldrge	r1, [r4, #0]
 800389a:	60a6      	str	r6, [r4, #8]
 800389c:	bfa4      	itt	ge
 800389e:	f021 0104 	bicge.w	r1, r1, #4
 80038a2:	6021      	strge	r1, [r4, #0]
 80038a4:	b90d      	cbnz	r5, 80038aa <_printf_i+0x112>
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	d04b      	beq.n	8003942 <_printf_i+0x1aa>
 80038aa:	4616      	mov	r6, r2
 80038ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80038b0:	fb03 5711 	mls	r7, r3, r1, r5
 80038b4:	5dc7      	ldrb	r7, [r0, r7]
 80038b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038ba:	462f      	mov	r7, r5
 80038bc:	42bb      	cmp	r3, r7
 80038be:	460d      	mov	r5, r1
 80038c0:	d9f4      	bls.n	80038ac <_printf_i+0x114>
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d10b      	bne.n	80038de <_printf_i+0x146>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	07df      	lsls	r7, r3, #31
 80038ca:	d508      	bpl.n	80038de <_printf_i+0x146>
 80038cc:	6923      	ldr	r3, [r4, #16]
 80038ce:	6861      	ldr	r1, [r4, #4]
 80038d0:	4299      	cmp	r1, r3
 80038d2:	bfde      	ittt	le
 80038d4:	2330      	movle	r3, #48	@ 0x30
 80038d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038de:	1b92      	subs	r2, r2, r6
 80038e0:	6122      	str	r2, [r4, #16]
 80038e2:	464b      	mov	r3, r9
 80038e4:	4621      	mov	r1, r4
 80038e6:	4640      	mov	r0, r8
 80038e8:	f8cd a000 	str.w	sl, [sp]
 80038ec:	aa03      	add	r2, sp, #12
 80038ee:	f7ff fee1 	bl	80036b4 <_printf_common>
 80038f2:	3001      	adds	r0, #1
 80038f4:	d14a      	bne.n	800398c <_printf_i+0x1f4>
 80038f6:	f04f 30ff 	mov.w	r0, #4294967295
 80038fa:	b004      	add	sp, #16
 80038fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f043 0320 	orr.w	r3, r3, #32
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	2778      	movs	r7, #120	@ 0x78
 800390a:	4832      	ldr	r0, [pc, #200]	@ (80039d4 <_printf_i+0x23c>)
 800390c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	6831      	ldr	r1, [r6, #0]
 8003914:	061f      	lsls	r7, r3, #24
 8003916:	f851 5b04 	ldr.w	r5, [r1], #4
 800391a:	d402      	bmi.n	8003922 <_printf_i+0x18a>
 800391c:	065f      	lsls	r7, r3, #25
 800391e:	bf48      	it	mi
 8003920:	b2ad      	uxthmi	r5, r5
 8003922:	6031      	str	r1, [r6, #0]
 8003924:	07d9      	lsls	r1, r3, #31
 8003926:	bf44      	itt	mi
 8003928:	f043 0320 	orrmi.w	r3, r3, #32
 800392c:	6023      	strmi	r3, [r4, #0]
 800392e:	b11d      	cbz	r5, 8003938 <_printf_i+0x1a0>
 8003930:	2310      	movs	r3, #16
 8003932:	e7ab      	b.n	800388c <_printf_i+0xf4>
 8003934:	4826      	ldr	r0, [pc, #152]	@ (80039d0 <_printf_i+0x238>)
 8003936:	e7e9      	b.n	800390c <_printf_i+0x174>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	e7f6      	b.n	8003930 <_printf_i+0x198>
 8003942:	4616      	mov	r6, r2
 8003944:	e7bd      	b.n	80038c2 <_printf_i+0x12a>
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	6825      	ldr	r5, [r4, #0]
 800394a:	1d18      	adds	r0, r3, #4
 800394c:	6961      	ldr	r1, [r4, #20]
 800394e:	6030      	str	r0, [r6, #0]
 8003950:	062e      	lsls	r6, r5, #24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	d501      	bpl.n	800395a <_printf_i+0x1c2>
 8003956:	6019      	str	r1, [r3, #0]
 8003958:	e002      	b.n	8003960 <_printf_i+0x1c8>
 800395a:	0668      	lsls	r0, r5, #25
 800395c:	d5fb      	bpl.n	8003956 <_printf_i+0x1be>
 800395e:	8019      	strh	r1, [r3, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	4616      	mov	r6, r2
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	e7bc      	b.n	80038e2 <_printf_i+0x14a>
 8003968:	6833      	ldr	r3, [r6, #0]
 800396a:	2100      	movs	r1, #0
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	6032      	str	r2, [r6, #0]
 8003970:	681e      	ldr	r6, [r3, #0]
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	4630      	mov	r0, r6
 8003976:	f000 f859 	bl	8003a2c <memchr>
 800397a:	b108      	cbz	r0, 8003980 <_printf_i+0x1e8>
 800397c:	1b80      	subs	r0, r0, r6
 800397e:	6060      	str	r0, [r4, #4]
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	2300      	movs	r3, #0
 8003986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800398a:	e7aa      	b.n	80038e2 <_printf_i+0x14a>
 800398c:	4632      	mov	r2, r6
 800398e:	4649      	mov	r1, r9
 8003990:	4640      	mov	r0, r8
 8003992:	6923      	ldr	r3, [r4, #16]
 8003994:	47d0      	blx	sl
 8003996:	3001      	adds	r0, #1
 8003998:	d0ad      	beq.n	80038f6 <_printf_i+0x15e>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	079b      	lsls	r3, r3, #30
 800399e:	d413      	bmi.n	80039c8 <_printf_i+0x230>
 80039a0:	68e0      	ldr	r0, [r4, #12]
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	4298      	cmp	r0, r3
 80039a6:	bfb8      	it	lt
 80039a8:	4618      	movlt	r0, r3
 80039aa:	e7a6      	b.n	80038fa <_printf_i+0x162>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4632      	mov	r2, r6
 80039b0:	4649      	mov	r1, r9
 80039b2:	4640      	mov	r0, r8
 80039b4:	47d0      	blx	sl
 80039b6:	3001      	adds	r0, #1
 80039b8:	d09d      	beq.n	80038f6 <_printf_i+0x15e>
 80039ba:	3501      	adds	r5, #1
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	9903      	ldr	r1, [sp, #12]
 80039c0:	1a5b      	subs	r3, r3, r1
 80039c2:	42ab      	cmp	r3, r5
 80039c4:	dcf2      	bgt.n	80039ac <_printf_i+0x214>
 80039c6:	e7eb      	b.n	80039a0 <_printf_i+0x208>
 80039c8:	2500      	movs	r5, #0
 80039ca:	f104 0619 	add.w	r6, r4, #25
 80039ce:	e7f5      	b.n	80039bc <_printf_i+0x224>
 80039d0:	08003b9b 	.word	0x08003b9b
 80039d4:	08003bac 	.word	0x08003bac

080039d8 <memmove>:
 80039d8:	4288      	cmp	r0, r1
 80039da:	b510      	push	{r4, lr}
 80039dc:	eb01 0402 	add.w	r4, r1, r2
 80039e0:	d902      	bls.n	80039e8 <memmove+0x10>
 80039e2:	4284      	cmp	r4, r0
 80039e4:	4623      	mov	r3, r4
 80039e6:	d807      	bhi.n	80039f8 <memmove+0x20>
 80039e8:	1e43      	subs	r3, r0, #1
 80039ea:	42a1      	cmp	r1, r4
 80039ec:	d008      	beq.n	8003a00 <memmove+0x28>
 80039ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039f6:	e7f8      	b.n	80039ea <memmove+0x12>
 80039f8:	4601      	mov	r1, r0
 80039fa:	4402      	add	r2, r0
 80039fc:	428a      	cmp	r2, r1
 80039fe:	d100      	bne.n	8003a02 <memmove+0x2a>
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a0a:	e7f7      	b.n	80039fc <memmove+0x24>

08003a0c <_sbrk_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4d05      	ldr	r5, [pc, #20]	@ (8003a28 <_sbrk_r+0x1c>)
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	f7fd fb2e 	bl	8001078 <_sbrk>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_sbrk_r+0x1a>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_sbrk_r+0x1a>
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	200002fc 	.word	0x200002fc

08003a2c <memchr>:
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	b2c9      	uxtb	r1, r1
 8003a32:	4402      	add	r2, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	d101      	bne.n	8003a3e <memchr+0x12>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e003      	b.n	8003a46 <memchr+0x1a>
 8003a3e:	7804      	ldrb	r4, [r0, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	428c      	cmp	r4, r1
 8003a44:	d1f6      	bne.n	8003a34 <memchr+0x8>
 8003a46:	bd10      	pop	{r4, pc}

08003a48 <memcpy>:
 8003a48:	440a      	add	r2, r1
 8003a4a:	4291      	cmp	r1, r2
 8003a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a50:	d100      	bne.n	8003a54 <memcpy+0xc>
 8003a52:	4770      	bx	lr
 8003a54:	b510      	push	{r4, lr}
 8003a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a5a:	4291      	cmp	r1, r2
 8003a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a60:	d1f9      	bne.n	8003a56 <memcpy+0xe>
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <_realloc_r>:
 8003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a68:	4680      	mov	r8, r0
 8003a6a:	4615      	mov	r5, r2
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	b921      	cbnz	r1, 8003a7a <_realloc_r+0x16>
 8003a70:	4611      	mov	r1, r2
 8003a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a76:	f7ff bc39 	b.w	80032ec <_malloc_r>
 8003a7a:	b92a      	cbnz	r2, 8003a88 <_realloc_r+0x24>
 8003a7c:	f7ff fbcc 	bl	8003218 <_free_r>
 8003a80:	2400      	movs	r4, #0
 8003a82:	4620      	mov	r0, r4
 8003a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a88:	f000 f81a 	bl	8003ac0 <_malloc_usable_size_r>
 8003a8c:	4285      	cmp	r5, r0
 8003a8e:	4606      	mov	r6, r0
 8003a90:	d802      	bhi.n	8003a98 <_realloc_r+0x34>
 8003a92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a96:	d8f4      	bhi.n	8003a82 <_realloc_r+0x1e>
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	f7ff fc26 	bl	80032ec <_malloc_r>
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0ec      	beq.n	8003a80 <_realloc_r+0x1c>
 8003aa6:	42b5      	cmp	r5, r6
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4621      	mov	r1, r4
 8003aac:	bf28      	it	cs
 8003aae:	4632      	movcs	r2, r6
 8003ab0:	f7ff ffca 	bl	8003a48 <memcpy>
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	f7ff fbae 	bl	8003218 <_free_r>
 8003abc:	463c      	mov	r4, r7
 8003abe:	e7e0      	b.n	8003a82 <_realloc_r+0x1e>

08003ac0 <_malloc_usable_size_r>:
 8003ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac4:	1f18      	subs	r0, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bfbc      	itt	lt
 8003aca:	580b      	ldrlt	r3, [r1, r0]
 8003acc:	18c0      	addlt	r0, r0, r3
 8003ace:	4770      	bx	lr

08003ad0 <_init>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr

08003adc <_fini>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	bf00      	nop
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr
